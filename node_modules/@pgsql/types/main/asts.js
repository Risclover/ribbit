"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    parseResult(_p) {
        return {
            version: _p?.version,
            stmts: _p?.stmts
        };
    },
    scanResult(_p) {
        return {
            version: _p?.version,
            tokens: _p?.tokens
        };
    },
    node(_p) {
        return {
            Alias: _p?.Alias,
            RangeVar: _p?.RangeVar,
            TableFunc: _p?.TableFunc,
            Expr: _p?.Expr,
            Var: _p?.Var,
            Param: _p?.Param,
            Aggref: _p?.Aggref,
            GroupingFunc: _p?.GroupingFunc,
            WindowFunc: _p?.WindowFunc,
            SubscriptingRef: _p?.SubscriptingRef,
            FuncExpr: _p?.FuncExpr,
            NamedArgExpr: _p?.NamedArgExpr,
            OpExpr: _p?.OpExpr,
            DistinctExpr: _p?.DistinctExpr,
            NullIfExpr: _p?.NullIfExpr,
            ScalarArrayOpExpr: _p?.ScalarArrayOpExpr,
            BoolExpr: _p?.BoolExpr,
            SubLink: _p?.SubLink,
            SubPlan: _p?.SubPlan,
            AlternativeSubPlan: _p?.AlternativeSubPlan,
            FieldSelect: _p?.FieldSelect,
            FieldStore: _p?.FieldStore,
            RelabelType: _p?.RelabelType,
            CoerceViaIO: _p?.CoerceViaIO,
            ArrayCoerceExpr: _p?.ArrayCoerceExpr,
            ConvertRowtypeExpr: _p?.ConvertRowtypeExpr,
            CollateExpr: _p?.CollateExpr,
            CaseExpr: _p?.CaseExpr,
            CaseWhen: _p?.CaseWhen,
            CaseTestExpr: _p?.CaseTestExpr,
            ArrayExpr: _p?.ArrayExpr,
            RowExpr: _p?.RowExpr,
            RowCompareExpr: _p?.RowCompareExpr,
            CoalesceExpr: _p?.CoalesceExpr,
            MinMaxExpr: _p?.MinMaxExpr,
            SQLValueFunction: _p?.SQLValueFunction,
            XmlExpr: _p?.XmlExpr,
            NullTest: _p?.NullTest,
            BooleanTest: _p?.BooleanTest,
            CoerceToDomain: _p?.CoerceToDomain,
            CoerceToDomainValue: _p?.CoerceToDomainValue,
            SetToDefault: _p?.SetToDefault,
            CurrentOfExpr: _p?.CurrentOfExpr,
            NextValueExpr: _p?.NextValueExpr,
            InferenceElem: _p?.InferenceElem,
            TargetEntry: _p?.TargetEntry,
            RangeTblRef: _p?.RangeTblRef,
            JoinExpr: _p?.JoinExpr,
            FromExpr: _p?.FromExpr,
            OnConflictExpr: _p?.OnConflictExpr,
            IntoClause: _p?.IntoClause,
            RawStmt: _p?.RawStmt,
            Query: _p?.Query,
            InsertStmt: _p?.InsertStmt,
            DeleteStmt: _p?.DeleteStmt,
            UpdateStmt: _p?.UpdateStmt,
            SelectStmt: _p?.SelectStmt,
            AlterTableStmt: _p?.AlterTableStmt,
            AlterTableCmd: _p?.AlterTableCmd,
            AlterDomainStmt: _p?.AlterDomainStmt,
            SetOperationStmt: _p?.SetOperationStmt,
            GrantStmt: _p?.GrantStmt,
            GrantRoleStmt: _p?.GrantRoleStmt,
            AlterDefaultPrivilegesStmt: _p?.AlterDefaultPrivilegesStmt,
            ClosePortalStmt: _p?.ClosePortalStmt,
            ClusterStmt: _p?.ClusterStmt,
            CopyStmt: _p?.CopyStmt,
            CreateStmt: _p?.CreateStmt,
            DefineStmt: _p?.DefineStmt,
            DropStmt: _p?.DropStmt,
            TruncateStmt: _p?.TruncateStmt,
            CommentStmt: _p?.CommentStmt,
            FetchStmt: _p?.FetchStmt,
            IndexStmt: _p?.IndexStmt,
            CreateFunctionStmt: _p?.CreateFunctionStmt,
            AlterFunctionStmt: _p?.AlterFunctionStmt,
            DoStmt: _p?.DoStmt,
            RenameStmt: _p?.RenameStmt,
            RuleStmt: _p?.RuleStmt,
            NotifyStmt: _p?.NotifyStmt,
            ListenStmt: _p?.ListenStmt,
            UnlistenStmt: _p?.UnlistenStmt,
            TransactionStmt: _p?.TransactionStmt,
            ViewStmt: _p?.ViewStmt,
            LoadStmt: _p?.LoadStmt,
            CreateDomainStmt: _p?.CreateDomainStmt,
            CreatedbStmt: _p?.CreatedbStmt,
            DropdbStmt: _p?.DropdbStmt,
            VacuumStmt: _p?.VacuumStmt,
            ExplainStmt: _p?.ExplainStmt,
            CreateTableAsStmt: _p?.CreateTableAsStmt,
            CreateSeqStmt: _p?.CreateSeqStmt,
            AlterSeqStmt: _p?.AlterSeqStmt,
            VariableSetStmt: _p?.VariableSetStmt,
            VariableShowStmt: _p?.VariableShowStmt,
            DiscardStmt: _p?.DiscardStmt,
            CreateTrigStmt: _p?.CreateTrigStmt,
            CreatePLangStmt: _p?.CreatePLangStmt,
            CreateRoleStmt: _p?.CreateRoleStmt,
            AlterRoleStmt: _p?.AlterRoleStmt,
            DropRoleStmt: _p?.DropRoleStmt,
            LockStmt: _p?.LockStmt,
            ConstraintsSetStmt: _p?.ConstraintsSetStmt,
            ReindexStmt: _p?.ReindexStmt,
            CheckPointStmt: _p?.CheckPointStmt,
            CreateSchemaStmt: _p?.CreateSchemaStmt,
            AlterDatabaseStmt: _p?.AlterDatabaseStmt,
            AlterDatabaseSetStmt: _p?.AlterDatabaseSetStmt,
            AlterRoleSetStmt: _p?.AlterRoleSetStmt,
            CreateConversionStmt: _p?.CreateConversionStmt,
            CreateCastStmt: _p?.CreateCastStmt,
            CreateOpClassStmt: _p?.CreateOpClassStmt,
            CreateOpFamilyStmt: _p?.CreateOpFamilyStmt,
            AlterOpFamilyStmt: _p?.AlterOpFamilyStmt,
            PrepareStmt: _p?.PrepareStmt,
            ExecuteStmt: _p?.ExecuteStmt,
            DeallocateStmt: _p?.DeallocateStmt,
            DeclareCursorStmt: _p?.DeclareCursorStmt,
            CreateTableSpaceStmt: _p?.CreateTableSpaceStmt,
            DropTableSpaceStmt: _p?.DropTableSpaceStmt,
            AlterObjectDependsStmt: _p?.AlterObjectDependsStmt,
            AlterObjectSchemaStmt: _p?.AlterObjectSchemaStmt,
            AlterOwnerStmt: _p?.AlterOwnerStmt,
            AlterOperatorStmt: _p?.AlterOperatorStmt,
            AlterTypeStmt: _p?.AlterTypeStmt,
            DropOwnedStmt: _p?.DropOwnedStmt,
            ReassignOwnedStmt: _p?.ReassignOwnedStmt,
            CompositeTypeStmt: _p?.CompositeTypeStmt,
            CreateEnumStmt: _p?.CreateEnumStmt,
            CreateRangeStmt: _p?.CreateRangeStmt,
            AlterEnumStmt: _p?.AlterEnumStmt,
            AlterTSDictionaryStmt: _p?.AlterTSDictionaryStmt,
            AlterTSConfigurationStmt: _p?.AlterTSConfigurationStmt,
            CreateFdwStmt: _p?.CreateFdwStmt,
            AlterFdwStmt: _p?.AlterFdwStmt,
            CreateForeignServerStmt: _p?.CreateForeignServerStmt,
            AlterForeignServerStmt: _p?.AlterForeignServerStmt,
            CreateUserMappingStmt: _p?.CreateUserMappingStmt,
            AlterUserMappingStmt: _p?.AlterUserMappingStmt,
            DropUserMappingStmt: _p?.DropUserMappingStmt,
            AlterTableSpaceOptionsStmt: _p?.AlterTableSpaceOptionsStmt,
            AlterTableMoveAllStmt: _p?.AlterTableMoveAllStmt,
            SecLabelStmt: _p?.SecLabelStmt,
            CreateForeignTableStmt: _p?.CreateForeignTableStmt,
            ImportForeignSchemaStmt: _p?.ImportForeignSchemaStmt,
            CreateExtensionStmt: _p?.CreateExtensionStmt,
            AlterExtensionStmt: _p?.AlterExtensionStmt,
            AlterExtensionContentsStmt: _p?.AlterExtensionContentsStmt,
            CreateEventTrigStmt: _p?.CreateEventTrigStmt,
            AlterEventTrigStmt: _p?.AlterEventTrigStmt,
            RefreshMatViewStmt: _p?.RefreshMatViewStmt,
            ReplicaIdentityStmt: _p?.ReplicaIdentityStmt,
            AlterSystemStmt: _p?.AlterSystemStmt,
            CreatePolicyStmt: _p?.CreatePolicyStmt,
            AlterPolicyStmt: _p?.AlterPolicyStmt,
            CreateTransformStmt: _p?.CreateTransformStmt,
            CreateAmStmt: _p?.CreateAmStmt,
            CreatePublicationStmt: _p?.CreatePublicationStmt,
            AlterPublicationStmt: _p?.AlterPublicationStmt,
            CreateSubscriptionStmt: _p?.CreateSubscriptionStmt,
            AlterSubscriptionStmt: _p?.AlterSubscriptionStmt,
            DropSubscriptionStmt: _p?.DropSubscriptionStmt,
            CreateStatsStmt: _p?.CreateStatsStmt,
            AlterCollationStmt: _p?.AlterCollationStmt,
            CallStmt: _p?.CallStmt,
            AlterStatsStmt: _p?.AlterStatsStmt,
            A_Expr: _p?.A_Expr,
            ColumnRef: _p?.ColumnRef,
            ParamRef: _p?.ParamRef,
            A_Const: _p?.A_Const,
            FuncCall: _p?.FuncCall,
            A_Star: _p?.A_Star,
            A_Indices: _p?.A_Indices,
            A_Indirection: _p?.A_Indirection,
            A_ArrayExpr: _p?.A_ArrayExpr,
            ResTarget: _p?.ResTarget,
            MultiAssignRef: _p?.MultiAssignRef,
            TypeCast: _p?.TypeCast,
            CollateClause: _p?.CollateClause,
            SortBy: _p?.SortBy,
            WindowDef: _p?.WindowDef,
            RangeSubselect: _p?.RangeSubselect,
            RangeFunction: _p?.RangeFunction,
            RangeTableSample: _p?.RangeTableSample,
            RangeTableFunc: _p?.RangeTableFunc,
            RangeTableFuncCol: _p?.RangeTableFuncCol,
            TypeName: _p?.TypeName,
            ColumnDef: _p?.ColumnDef,
            IndexElem: _p?.IndexElem,
            Constraint: _p?.Constraint,
            DefElem: _p?.DefElem,
            RangeTblEntry: _p?.RangeTblEntry,
            RangeTblFunction: _p?.RangeTblFunction,
            TableSampleClause: _p?.TableSampleClause,
            WithCheckOption: _p?.WithCheckOption,
            SortGroupClause: _p?.SortGroupClause,
            GroupingSet: _p?.GroupingSet,
            WindowClause: _p?.WindowClause,
            ObjectWithArgs: _p?.ObjectWithArgs,
            AccessPriv: _p?.AccessPriv,
            CreateOpClassItem: _p?.CreateOpClassItem,
            TableLikeClause: _p?.TableLikeClause,
            FunctionParameter: _p?.FunctionParameter,
            LockingClause: _p?.LockingClause,
            RowMarkClause: _p?.RowMarkClause,
            XmlSerialize: _p?.XmlSerialize,
            WithClause: _p?.WithClause,
            InferClause: _p?.InferClause,
            OnConflictClause: _p?.OnConflictClause,
            CommonTableExpr: _p?.CommonTableExpr,
            RoleSpec: _p?.RoleSpec,
            TriggerTransition: _p?.TriggerTransition,
            PartitionElem: _p?.PartitionElem,
            PartitionSpec: _p?.PartitionSpec,
            PartitionBoundSpec: _p?.PartitionBoundSpec,
            PartitionRangeDatum: _p?.PartitionRangeDatum,
            PartitionCmd: _p?.PartitionCmd,
            VacuumRelation: _p?.VacuumRelation,
            InlineCodeBlock: _p?.InlineCodeBlock,
            CallContext: _p?.CallContext,
            Integer: _p?.Integer,
            Float: _p?.Float,
            String: _p?.String,
            BitString: _p?.BitString,
            Null: _p?.Null,
            List: _p?.List,
            IntList: _p?.IntList,
            OidList: _p?.OidList
        };
    },
    integer(_p) {
        return {
            ival: _p?.ival
        };
    },
    float(_p) {
        return {
            str: _p?.str
        };
    },
    string(_p) {
        return {
            str: _p?.str
        };
    },
    bitString(_p) {
        return {
            str: _p?.str
        };
    },
    null(_p) {
        return {};
    },
    list(_p) {
        return {
            items: _p?.items
        };
    },
    oidList(_p) {
        return {
            items: _p?.items
        };
    },
    intList(_p) {
        return {
            items: _p?.items
        };
    },
    alias(_p) {
        return {
            aliasname: _p?.aliasname,
            colnames: _p?.colnames
        };
    },
    rangeVar(_p) {
        return {
            catalogname: _p?.catalogname,
            schemaname: _p?.schemaname,
            relname: _p?.relname,
            inh: _p?.inh,
            relpersistence: _p?.relpersistence,
            alias: _p?.alias,
            location: _p?.location
        };
    },
    tableFunc(_p) {
        return {
            ns_uris: _p?.ns_uris,
            ns_names: _p?.ns_names,
            docexpr: _p?.docexpr,
            rowexpr: _p?.rowexpr,
            colnames: _p?.colnames,
            coltypes: _p?.coltypes,
            coltypmods: _p?.coltypmods,
            colcollations: _p?.colcollations,
            colexprs: _p?.colexprs,
            coldefexprs: _p?.coldefexprs,
            notnulls: _p?.notnulls,
            ordinalitycol: _p?.ordinalitycol,
            location: _p?.location
        };
    },
    expr(_p) {
        return {};
    },
    var(_p) {
        return {
            xpr: _p?.xpr,
            varno: _p?.varno,
            varattno: _p?.varattno,
            vartype: _p?.vartype,
            vartypmod: _p?.vartypmod,
            varcollid: _p?.varcollid,
            varlevelsup: _p?.varlevelsup,
            varnosyn: _p?.varnosyn,
            varattnosyn: _p?.varattnosyn,
            location: _p?.location
        };
    },
    param(_p) {
        return {
            xpr: _p?.xpr,
            paramkind: _p?.paramkind,
            paramid: _p?.paramid,
            paramtype: _p?.paramtype,
            paramtypmod: _p?.paramtypmod,
            paramcollid: _p?.paramcollid,
            location: _p?.location
        };
    },
    aggref(_p) {
        return {
            xpr: _p?.xpr,
            aggfnoid: _p?.aggfnoid,
            aggtype: _p?.aggtype,
            aggcollid: _p?.aggcollid,
            inputcollid: _p?.inputcollid,
            aggtranstype: _p?.aggtranstype,
            aggargtypes: _p?.aggargtypes,
            aggdirectargs: _p?.aggdirectargs,
            args: _p?.args,
            aggorder: _p?.aggorder,
            aggdistinct: _p?.aggdistinct,
            aggfilter: _p?.aggfilter,
            aggstar: _p?.aggstar,
            aggvariadic: _p?.aggvariadic,
            aggkind: _p?.aggkind,
            agglevelsup: _p?.agglevelsup,
            aggsplit: _p?.aggsplit,
            location: _p?.location
        };
    },
    groupingFunc(_p) {
        return {
            xpr: _p?.xpr,
            args: _p?.args,
            refs: _p?.refs,
            cols: _p?.cols,
            agglevelsup: _p?.agglevelsup,
            location: _p?.location
        };
    },
    windowFunc(_p) {
        return {
            xpr: _p?.xpr,
            winfnoid: _p?.winfnoid,
            wintype: _p?.wintype,
            wincollid: _p?.wincollid,
            inputcollid: _p?.inputcollid,
            args: _p?.args,
            aggfilter: _p?.aggfilter,
            winref: _p?.winref,
            winstar: _p?.winstar,
            winagg: _p?.winagg,
            location: _p?.location
        };
    },
    subscriptingRef(_p) {
        return {
            xpr: _p?.xpr,
            refcontainertype: _p?.refcontainertype,
            refelemtype: _p?.refelemtype,
            reftypmod: _p?.reftypmod,
            refcollid: _p?.refcollid,
            refupperindexpr: _p?.refupperindexpr,
            reflowerindexpr: _p?.reflowerindexpr,
            refexpr: _p?.refexpr,
            refassgnexpr: _p?.refassgnexpr
        };
    },
    funcExpr(_p) {
        return {
            xpr: _p?.xpr,
            funcid: _p?.funcid,
            funcresulttype: _p?.funcresulttype,
            funcretset: _p?.funcretset,
            funcvariadic: _p?.funcvariadic,
            funcformat: _p?.funcformat,
            funccollid: _p?.funccollid,
            inputcollid: _p?.inputcollid,
            args: _p?.args,
            location: _p?.location
        };
    },
    namedArgExpr(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            name: _p?.name,
            argnumber: _p?.argnumber,
            location: _p?.location
        };
    },
    opExpr(_p) {
        return {
            xpr: _p?.xpr,
            opno: _p?.opno,
            opfuncid: _p?.opfuncid,
            opresulttype: _p?.opresulttype,
            opretset: _p?.opretset,
            opcollid: _p?.opcollid,
            inputcollid: _p?.inputcollid,
            args: _p?.args,
            location: _p?.location
        };
    },
    distinctExpr(_p) {
        return {
            xpr: _p?.xpr,
            opno: _p?.opno,
            opfuncid: _p?.opfuncid,
            opresulttype: _p?.opresulttype,
            opretset: _p?.opretset,
            opcollid: _p?.opcollid,
            inputcollid: _p?.inputcollid,
            args: _p?.args,
            location: _p?.location
        };
    },
    nullIfExpr(_p) {
        return {
            xpr: _p?.xpr,
            opno: _p?.opno,
            opfuncid: _p?.opfuncid,
            opresulttype: _p?.opresulttype,
            opretset: _p?.opretset,
            opcollid: _p?.opcollid,
            inputcollid: _p?.inputcollid,
            args: _p?.args,
            location: _p?.location
        };
    },
    scalarArrayOpExpr(_p) {
        return {
            xpr: _p?.xpr,
            opno: _p?.opno,
            opfuncid: _p?.opfuncid,
            useOr: _p?.useOr,
            inputcollid: _p?.inputcollid,
            args: _p?.args,
            location: _p?.location
        };
    },
    boolExpr(_p) {
        return {
            xpr: _p?.xpr,
            boolop: _p?.boolop,
            args: _p?.args,
            location: _p?.location
        };
    },
    subLink(_p) {
        return {
            xpr: _p?.xpr,
            subLinkType: _p?.subLinkType,
            subLinkId: _p?.subLinkId,
            testexpr: _p?.testexpr,
            operName: _p?.operName,
            subselect: _p?.subselect,
            location: _p?.location
        };
    },
    subPlan(_p) {
        return {
            xpr: _p?.xpr,
            subLinkType: _p?.subLinkType,
            testexpr: _p?.testexpr,
            paramIds: _p?.paramIds,
            plan_id: _p?.plan_id,
            plan_name: _p?.plan_name,
            firstColType: _p?.firstColType,
            firstColTypmod: _p?.firstColTypmod,
            firstColCollation: _p?.firstColCollation,
            useHashTable: _p?.useHashTable,
            unknownEqFalse: _p?.unknownEqFalse,
            parallel_safe: _p?.parallel_safe,
            setParam: _p?.setParam,
            parParam: _p?.parParam,
            args: _p?.args,
            startup_cost: _p?.startup_cost,
            per_call_cost: _p?.per_call_cost
        };
    },
    alternativeSubPlan(_p) {
        return {
            xpr: _p?.xpr,
            subplans: _p?.subplans
        };
    },
    fieldSelect(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            fieldnum: _p?.fieldnum,
            resulttype: _p?.resulttype,
            resulttypmod: _p?.resulttypmod,
            resultcollid: _p?.resultcollid
        };
    },
    fieldStore(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            newvals: _p?.newvals,
            fieldnums: _p?.fieldnums,
            resulttype: _p?.resulttype
        };
    },
    relabelType(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            resulttype: _p?.resulttype,
            resulttypmod: _p?.resulttypmod,
            resultcollid: _p?.resultcollid,
            relabelformat: _p?.relabelformat,
            location: _p?.location
        };
    },
    coerceViaio(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            resulttype: _p?.resulttype,
            resultcollid: _p?.resultcollid,
            coerceformat: _p?.coerceformat,
            location: _p?.location
        };
    },
    arrayCoerceExpr(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            elemexpr: _p?.elemexpr,
            resulttype: _p?.resulttype,
            resulttypmod: _p?.resulttypmod,
            resultcollid: _p?.resultcollid,
            coerceformat: _p?.coerceformat,
            location: _p?.location
        };
    },
    convertRowtypeExpr(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            resulttype: _p?.resulttype,
            convertformat: _p?.convertformat,
            location: _p?.location
        };
    },
    collateExpr(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            collOid: _p?.collOid,
            location: _p?.location
        };
    },
    caseExpr(_p) {
        return {
            xpr: _p?.xpr,
            casetype: _p?.casetype,
            casecollid: _p?.casecollid,
            arg: _p?.arg,
            args: _p?.args,
            defresult: _p?.defresult,
            location: _p?.location
        };
    },
    caseWhen(_p) {
        return {
            xpr: _p?.xpr,
            expr: _p?.expr,
            result: _p?.result,
            location: _p?.location
        };
    },
    caseTestExpr(_p) {
        return {
            xpr: _p?.xpr,
            typeId: _p?.typeId,
            typeMod: _p?.typeMod,
            collation: _p?.collation
        };
    },
    arrayExpr(_p) {
        return {
            xpr: _p?.xpr,
            array_typeid: _p?.array_typeid,
            array_collid: _p?.array_collid,
            element_typeid: _p?.element_typeid,
            elements: _p?.elements,
            multidims: _p?.multidims,
            location: _p?.location
        };
    },
    rowExpr(_p) {
        return {
            xpr: _p?.xpr,
            args: _p?.args,
            row_typeid: _p?.row_typeid,
            row_format: _p?.row_format,
            colnames: _p?.colnames,
            location: _p?.location
        };
    },
    rowCompareExpr(_p) {
        return {
            xpr: _p?.xpr,
            rctype: _p?.rctype,
            opnos: _p?.opnos,
            opfamilies: _p?.opfamilies,
            inputcollids: _p?.inputcollids,
            largs: _p?.largs,
            rargs: _p?.rargs
        };
    },
    coalesceExpr(_p) {
        return {
            xpr: _p?.xpr,
            coalescetype: _p?.coalescetype,
            coalescecollid: _p?.coalescecollid,
            args: _p?.args,
            location: _p?.location
        };
    },
    minMaxExpr(_p) {
        return {
            xpr: _p?.xpr,
            minmaxtype: _p?.minmaxtype,
            minmaxcollid: _p?.minmaxcollid,
            inputcollid: _p?.inputcollid,
            op: _p?.op,
            args: _p?.args,
            location: _p?.location
        };
    },
    sqlValueFunction(_p) {
        return {
            xpr: _p?.xpr,
            op: _p?.op,
            type: _p?.type,
            typmod: _p?.typmod,
            location: _p?.location
        };
    },
    xmlExpr(_p) {
        return {
            xpr: _p?.xpr,
            op: _p?.op,
            name: _p?.name,
            named_args: _p?.named_args,
            arg_names: _p?.arg_names,
            args: _p?.args,
            xmloption: _p?.xmloption,
            type: _p?.type,
            typmod: _p?.typmod,
            location: _p?.location
        };
    },
    nullTest(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            nulltesttype: _p?.nulltesttype,
            argisrow: _p?.argisrow,
            location: _p?.location
        };
    },
    booleanTest(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            booltesttype: _p?.booltesttype,
            location: _p?.location
        };
    },
    coerceToDomain(_p) {
        return {
            xpr: _p?.xpr,
            arg: _p?.arg,
            resulttype: _p?.resulttype,
            resulttypmod: _p?.resulttypmod,
            resultcollid: _p?.resultcollid,
            coercionformat: _p?.coercionformat,
            location: _p?.location
        };
    },
    coerceToDomainValue(_p) {
        return {
            xpr: _p?.xpr,
            typeId: _p?.typeId,
            typeMod: _p?.typeMod,
            collation: _p?.collation,
            location: _p?.location
        };
    },
    setToDefault(_p) {
        return {
            xpr: _p?.xpr,
            typeId: _p?.typeId,
            typeMod: _p?.typeMod,
            collation: _p?.collation,
            location: _p?.location
        };
    },
    currentOfExpr(_p) {
        return {
            xpr: _p?.xpr,
            cvarno: _p?.cvarno,
            cursor_name: _p?.cursor_name,
            cursor_param: _p?.cursor_param
        };
    },
    nextValueExpr(_p) {
        return {
            xpr: _p?.xpr,
            seqid: _p?.seqid,
            typeId: _p?.typeId
        };
    },
    inferenceElem(_p) {
        return {
            xpr: _p?.xpr,
            expr: _p?.expr,
            infercollid: _p?.infercollid,
            inferopclass: _p?.inferopclass
        };
    },
    targetEntry(_p) {
        return {
            xpr: _p?.xpr,
            expr: _p?.expr,
            resno: _p?.resno,
            resname: _p?.resname,
            ressortgroupref: _p?.ressortgroupref,
            resorigtbl: _p?.resorigtbl,
            resorigcol: _p?.resorigcol,
            resjunk: _p?.resjunk
        };
    },
    rangeTblRef(_p) {
        return {
            rtindex: _p?.rtindex
        };
    },
    joinExpr(_p) {
        return {
            jointype: _p?.jointype,
            isNatural: _p?.isNatural,
            larg: _p?.larg,
            rarg: _p?.rarg,
            usingClause: _p?.usingClause,
            quals: _p?.quals,
            alias: _p?.alias,
            rtindex: _p?.rtindex
        };
    },
    fromExpr(_p) {
        return {
            fromlist: _p?.fromlist,
            quals: _p?.quals
        };
    },
    onConflictExpr(_p) {
        return {
            action: _p?.action,
            arbiterElems: _p?.arbiterElems,
            arbiterWhere: _p?.arbiterWhere,
            constraint: _p?.constraint,
            onConflictSet: _p?.onConflictSet,
            onConflictWhere: _p?.onConflictWhere,
            exclRelIndex: _p?.exclRelIndex,
            exclRelTlist: _p?.exclRelTlist
        };
    },
    intoClause(_p) {
        return {
            rel: _p?.rel,
            colNames: _p?.colNames,
            accessMethod: _p?.accessMethod,
            options: _p?.options,
            onCommit: _p?.onCommit,
            tableSpaceName: _p?.tableSpaceName,
            viewQuery: _p?.viewQuery,
            skipData: _p?.skipData
        };
    },
    rawStmt(_p) {
        return {
            stmt: _p?.stmt,
            stmt_location: _p?.stmt_location,
            stmt_len: _p?.stmt_len
        };
    },
    query(_p) {
        return {
            commandType: _p?.commandType,
            querySource: _p?.querySource,
            canSetTag: _p?.canSetTag,
            utilityStmt: _p?.utilityStmt,
            resultRelation: _p?.resultRelation,
            hasAggs: _p?.hasAggs,
            hasWindowFuncs: _p?.hasWindowFuncs,
            hasTargetSRFs: _p?.hasTargetSRFs,
            hasSubLinks: _p?.hasSubLinks,
            hasDistinctOn: _p?.hasDistinctOn,
            hasRecursive: _p?.hasRecursive,
            hasModifyingCTE: _p?.hasModifyingCTE,
            hasForUpdate: _p?.hasForUpdate,
            hasRowSecurity: _p?.hasRowSecurity,
            cteList: _p?.cteList,
            rtable: _p?.rtable,
            jointree: _p?.jointree,
            targetList: _p?.targetList,
            override: _p?.override,
            onConflict: _p?.onConflict,
            returningList: _p?.returningList,
            groupClause: _p?.groupClause,
            groupingSets: _p?.groupingSets,
            havingQual: _p?.havingQual,
            windowClause: _p?.windowClause,
            distinctClause: _p?.distinctClause,
            sortClause: _p?.sortClause,
            limitOffset: _p?.limitOffset,
            limitCount: _p?.limitCount,
            limitOption: _p?.limitOption,
            rowMarks: _p?.rowMarks,
            setOperations: _p?.setOperations,
            constraintDeps: _p?.constraintDeps,
            withCheckOptions: _p?.withCheckOptions,
            stmt_location: _p?.stmt_location,
            stmt_len: _p?.stmt_len
        };
    },
    insertStmt(_p) {
        return {
            relation: _p?.relation,
            cols: _p?.cols,
            selectStmt: _p?.selectStmt,
            onConflictClause: _p?.onConflictClause,
            returningList: _p?.returningList,
            withClause: _p?.withClause,
            override: _p?.override
        };
    },
    deleteStmt(_p) {
        return {
            relation: _p?.relation,
            usingClause: _p?.usingClause,
            whereClause: _p?.whereClause,
            returningList: _p?.returningList,
            withClause: _p?.withClause
        };
    },
    updateStmt(_p) {
        return {
            relation: _p?.relation,
            targetList: _p?.targetList,
            whereClause: _p?.whereClause,
            fromClause: _p?.fromClause,
            returningList: _p?.returningList,
            withClause: _p?.withClause
        };
    },
    selectStmt(_p) {
        return {
            distinctClause: _p?.distinctClause,
            intoClause: _p?.intoClause,
            targetList: _p?.targetList,
            fromClause: _p?.fromClause,
            whereClause: _p?.whereClause,
            groupClause: _p?.groupClause,
            havingClause: _p?.havingClause,
            windowClause: _p?.windowClause,
            valuesLists: _p?.valuesLists,
            sortClause: _p?.sortClause,
            limitOffset: _p?.limitOffset,
            limitCount: _p?.limitCount,
            limitOption: _p?.limitOption,
            lockingClause: _p?.lockingClause,
            withClause: _p?.withClause,
            op: _p?.op,
            all: _p?.all,
            larg: _p?.larg,
            rarg: _p?.rarg
        };
    },
    alterTableStmt(_p) {
        return {
            relation: _p?.relation,
            cmds: _p?.cmds,
            relkind: _p?.relkind,
            missing_ok: _p?.missing_ok
        };
    },
    alterTableCmd(_p) {
        return {
            subtype: _p?.subtype,
            name: _p?.name,
            num: _p?.num,
            newowner: _p?.newowner,
            def: _p?.def,
            behavior: _p?.behavior,
            missing_ok: _p?.missing_ok,
            recurse: _p?.recurse
        };
    },
    alterDomainStmt(_p) {
        return {
            subtype: _p?.subtype,
            typeName: _p?.typeName,
            name: _p?.name,
            def: _p?.def,
            behavior: _p?.behavior,
            missing_ok: _p?.missing_ok
        };
    },
    setOperationStmt(_p) {
        return {
            op: _p?.op,
            all: _p?.all,
            larg: _p?.larg,
            rarg: _p?.rarg,
            colTypes: _p?.colTypes,
            colTypmods: _p?.colTypmods,
            colCollations: _p?.colCollations,
            groupClauses: _p?.groupClauses
        };
    },
    grantStmt(_p) {
        return {
            is_grant: _p?.is_grant,
            targtype: _p?.targtype,
            objtype: _p?.objtype,
            objects: _p?.objects,
            privileges: _p?.privileges,
            grantees: _p?.grantees,
            grant_option: _p?.grant_option,
            behavior: _p?.behavior
        };
    },
    grantRoleStmt(_p) {
        return {
            granted_roles: _p?.granted_roles,
            grantee_roles: _p?.grantee_roles,
            is_grant: _p?.is_grant,
            admin_opt: _p?.admin_opt,
            grantor: _p?.grantor,
            behavior: _p?.behavior
        };
    },
    alterDefaultPrivilegesStmt(_p) {
        return {
            options: _p?.options,
            action: _p?.action
        };
    },
    closePortalStmt(_p) {
        return {
            portalname: _p?.portalname
        };
    },
    clusterStmt(_p) {
        return {
            relation: _p?.relation,
            indexname: _p?.indexname,
            options: _p?.options
        };
    },
    copyStmt(_p) {
        return {
            relation: _p?.relation,
            query: _p?.query,
            attlist: _p?.attlist,
            is_from: _p?.is_from,
            is_program: _p?.is_program,
            filename: _p?.filename,
            options: _p?.options,
            whereClause: _p?.whereClause
        };
    },
    createStmt(_p) {
        return {
            relation: _p?.relation,
            tableElts: _p?.tableElts,
            inhRelations: _p?.inhRelations,
            partbound: _p?.partbound,
            partspec: _p?.partspec,
            ofTypename: _p?.ofTypename,
            constraints: _p?.constraints,
            options: _p?.options,
            oncommit: _p?.oncommit,
            tablespacename: _p?.tablespacename,
            accessMethod: _p?.accessMethod,
            if_not_exists: _p?.if_not_exists
        };
    },
    defineStmt(_p) {
        return {
            kind: _p?.kind,
            oldstyle: _p?.oldstyle,
            defnames: _p?.defnames,
            args: _p?.args,
            definition: _p?.definition,
            if_not_exists: _p?.if_not_exists,
            replace: _p?.replace
        };
    },
    dropStmt(_p) {
        return {
            objects: _p?.objects,
            removeType: _p?.removeType,
            behavior: _p?.behavior,
            missing_ok: _p?.missing_ok,
            concurrent: _p?.concurrent
        };
    },
    truncateStmt(_p) {
        return {
            relations: _p?.relations,
            restart_seqs: _p?.restart_seqs,
            behavior: _p?.behavior
        };
    },
    commentStmt(_p) {
        return {
            objtype: _p?.objtype,
            object: _p?.object,
            comment: _p?.comment
        };
    },
    fetchStmt(_p) {
        return {
            direction: _p?.direction,
            howMany: _p?.howMany,
            portalname: _p?.portalname,
            ismove: _p?.ismove
        };
    },
    indexStmt(_p) {
        return {
            idxname: _p?.idxname,
            relation: _p?.relation,
            accessMethod: _p?.accessMethod,
            tableSpace: _p?.tableSpace,
            indexParams: _p?.indexParams,
            indexIncludingParams: _p?.indexIncludingParams,
            options: _p?.options,
            whereClause: _p?.whereClause,
            excludeOpNames: _p?.excludeOpNames,
            idxcomment: _p?.idxcomment,
            indexOid: _p?.indexOid,
            oldNode: _p?.oldNode,
            oldCreateSubid: _p?.oldCreateSubid,
            oldFirstRelfilenodeSubid: _p?.oldFirstRelfilenodeSubid,
            unique: _p?.unique,
            primary: _p?.primary,
            isconstraint: _p?.isconstraint,
            deferrable: _p?.deferrable,
            initdeferred: _p?.initdeferred,
            transformed: _p?.transformed,
            concurrent: _p?.concurrent,
            if_not_exists: _p?.if_not_exists,
            reset_default_tblspc: _p?.reset_default_tblspc
        };
    },
    createFunctionStmt(_p) {
        return {
            is_procedure: _p?.is_procedure,
            replace: _p?.replace,
            funcname: _p?.funcname,
            parameters: _p?.parameters,
            returnType: _p?.returnType,
            options: _p?.options
        };
    },
    alterFunctionStmt(_p) {
        return {
            objtype: _p?.objtype,
            func: _p?.func,
            actions: _p?.actions
        };
    },
    doStmt(_p) {
        return {
            args: _p?.args
        };
    },
    renameStmt(_p) {
        return {
            renameType: _p?.renameType,
            relationType: _p?.relationType,
            relation: _p?.relation,
            object: _p?.object,
            subname: _p?.subname,
            newname: _p?.newname,
            behavior: _p?.behavior,
            missing_ok: _p?.missing_ok
        };
    },
    ruleStmt(_p) {
        return {
            relation: _p?.relation,
            rulename: _p?.rulename,
            whereClause: _p?.whereClause,
            event: _p?.event,
            instead: _p?.instead,
            actions: _p?.actions,
            replace: _p?.replace
        };
    },
    notifyStmt(_p) {
        return {
            conditionname: _p?.conditionname,
            payload: _p?.payload
        };
    },
    listenStmt(_p) {
        return {
            conditionname: _p?.conditionname
        };
    },
    unlistenStmt(_p) {
        return {
            conditionname: _p?.conditionname
        };
    },
    transactionStmt(_p) {
        return {
            kind: _p?.kind,
            options: _p?.options,
            savepoint_name: _p?.savepoint_name,
            gid: _p?.gid,
            chain: _p?.chain
        };
    },
    viewStmt(_p) {
        return {
            view: _p?.view,
            aliases: _p?.aliases,
            query: _p?.query,
            replace: _p?.replace,
            options: _p?.options,
            withCheckOption: _p?.withCheckOption
        };
    },
    loadStmt(_p) {
        return {
            filename: _p?.filename
        };
    },
    createDomainStmt(_p) {
        return {
            domainname: _p?.domainname,
            typeName: _p?.typeName,
            collClause: _p?.collClause,
            constraints: _p?.constraints
        };
    },
    createdbStmt(_p) {
        return {
            dbname: _p?.dbname,
            options: _p?.options
        };
    },
    dropdbStmt(_p) {
        return {
            dbname: _p?.dbname,
            missing_ok: _p?.missing_ok,
            options: _p?.options
        };
    },
    vacuumStmt(_p) {
        return {
            options: _p?.options,
            rels: _p?.rels,
            is_vacuumcmd: _p?.is_vacuumcmd
        };
    },
    explainStmt(_p) {
        return {
            query: _p?.query,
            options: _p?.options
        };
    },
    createTableAsStmt(_p) {
        return {
            query: _p?.query,
            into: _p?.into,
            relkind: _p?.relkind,
            is_select_into: _p?.is_select_into,
            if_not_exists: _p?.if_not_exists
        };
    },
    createSeqStmt(_p) {
        return {
            sequence: _p?.sequence,
            options: _p?.options,
            ownerId: _p?.ownerId,
            for_identity: _p?.for_identity,
            if_not_exists: _p?.if_not_exists
        };
    },
    alterSeqStmt(_p) {
        return {
            sequence: _p?.sequence,
            options: _p?.options,
            for_identity: _p?.for_identity,
            missing_ok: _p?.missing_ok
        };
    },
    variableSetStmt(_p) {
        return {
            kind: _p?.kind,
            name: _p?.name,
            args: _p?.args,
            is_local: _p?.is_local
        };
    },
    variableShowStmt(_p) {
        return {
            name: _p?.name
        };
    },
    discardStmt(_p) {
        return {
            target: _p?.target
        };
    },
    createTrigStmt(_p) {
        return {
            trigname: _p?.trigname,
            relation: _p?.relation,
            funcname: _p?.funcname,
            args: _p?.args,
            row: _p?.row,
            timing: _p?.timing,
            events: _p?.events,
            columns: _p?.columns,
            whenClause: _p?.whenClause,
            isconstraint: _p?.isconstraint,
            transitionRels: _p?.transitionRels,
            deferrable: _p?.deferrable,
            initdeferred: _p?.initdeferred,
            constrrel: _p?.constrrel
        };
    },
    createpLangStmt(_p) {
        return {
            replace: _p?.replace,
            plname: _p?.plname,
            plhandler: _p?.plhandler,
            plinline: _p?.plinline,
            plvalidator: _p?.plvalidator,
            pltrusted: _p?.pltrusted
        };
    },
    createRoleStmt(_p) {
        return {
            stmt_type: _p?.stmt_type,
            role: _p?.role,
            options: _p?.options
        };
    },
    alterRoleStmt(_p) {
        return {
            role: _p?.role,
            options: _p?.options,
            action: _p?.action
        };
    },
    dropRoleStmt(_p) {
        return {
            roles: _p?.roles,
            missing_ok: _p?.missing_ok
        };
    },
    lockStmt(_p) {
        return {
            relations: _p?.relations,
            mode: _p?.mode,
            nowait: _p?.nowait
        };
    },
    constraintsSetStmt(_p) {
        return {
            constraints: _p?.constraints,
            deferred: _p?.deferred
        };
    },
    reindexStmt(_p) {
        return {
            kind: _p?.kind,
            relation: _p?.relation,
            name: _p?.name,
            options: _p?.options,
            concurrent: _p?.concurrent
        };
    },
    checkPointStmt(_p) {
        return {};
    },
    createSchemaStmt(_p) {
        return {
            schemaname: _p?.schemaname,
            authrole: _p?.authrole,
            schemaElts: _p?.schemaElts,
            if_not_exists: _p?.if_not_exists
        };
    },
    alterDatabaseStmt(_p) {
        return {
            dbname: _p?.dbname,
            options: _p?.options
        };
    },
    alterDatabaseSetStmt(_p) {
        return {
            dbname: _p?.dbname,
            setstmt: _p?.setstmt
        };
    },
    alterRoleSetStmt(_p) {
        return {
            role: _p?.role,
            database: _p?.database,
            setstmt: _p?.setstmt
        };
    },
    createConversionStmt(_p) {
        return {
            conversion_name: _p?.conversion_name,
            for_encoding_name: _p?.for_encoding_name,
            to_encoding_name: _p?.to_encoding_name,
            func_name: _p?.func_name,
            def: _p?.def
        };
    },
    createCastStmt(_p) {
        return {
            sourcetype: _p?.sourcetype,
            targettype: _p?.targettype,
            func: _p?.func,
            context: _p?.context,
            inout: _p?.inout
        };
    },
    createOpClassStmt(_p) {
        return {
            opclassname: _p?.opclassname,
            opfamilyname: _p?.opfamilyname,
            amname: _p?.amname,
            datatype: _p?.datatype,
            items: _p?.items,
            isDefault: _p?.isDefault
        };
    },
    createOpFamilyStmt(_p) {
        return {
            opfamilyname: _p?.opfamilyname,
            amname: _p?.amname
        };
    },
    alterOpFamilyStmt(_p) {
        return {
            opfamilyname: _p?.opfamilyname,
            amname: _p?.amname,
            isDrop: _p?.isDrop,
            items: _p?.items
        };
    },
    prepareStmt(_p) {
        return {
            name: _p?.name,
            argtypes: _p?.argtypes,
            query: _p?.query
        };
    },
    executeStmt(_p) {
        return {
            name: _p?.name,
            params: _p?.params
        };
    },
    deallocateStmt(_p) {
        return {
            name: _p?.name
        };
    },
    declareCursorStmt(_p) {
        return {
            portalname: _p?.portalname,
            options: _p?.options,
            query: _p?.query
        };
    },
    createTableSpaceStmt(_p) {
        return {
            tablespacename: _p?.tablespacename,
            owner: _p?.owner,
            location: _p?.location,
            options: _p?.options
        };
    },
    dropTableSpaceStmt(_p) {
        return {
            tablespacename: _p?.tablespacename,
            missing_ok: _p?.missing_ok
        };
    },
    alterObjectDependsStmt(_p) {
        return {
            objectType: _p?.objectType,
            relation: _p?.relation,
            object: _p?.object,
            extname: _p?.extname,
            remove: _p?.remove
        };
    },
    alterObjectSchemaStmt(_p) {
        return {
            objectType: _p?.objectType,
            relation: _p?.relation,
            object: _p?.object,
            newschema: _p?.newschema,
            missing_ok: _p?.missing_ok
        };
    },
    alterOwnerStmt(_p) {
        return {
            objectType: _p?.objectType,
            relation: _p?.relation,
            object: _p?.object,
            newowner: _p?.newowner
        };
    },
    alterOperatorStmt(_p) {
        return {
            opername: _p?.opername,
            options: _p?.options
        };
    },
    alterTypeStmt(_p) {
        return {
            typeName: _p?.typeName,
            options: _p?.options
        };
    },
    dropOwnedStmt(_p) {
        return {
            roles: _p?.roles,
            behavior: _p?.behavior
        };
    },
    reassignOwnedStmt(_p) {
        return {
            roles: _p?.roles,
            newrole: _p?.newrole
        };
    },
    compositeTypeStmt(_p) {
        return {
            typevar: _p?.typevar,
            coldeflist: _p?.coldeflist
        };
    },
    createEnumStmt(_p) {
        return {
            typeName: _p?.typeName,
            vals: _p?.vals
        };
    },
    createRangeStmt(_p) {
        return {
            typeName: _p?.typeName,
            params: _p?.params
        };
    },
    alterEnumStmt(_p) {
        return {
            typeName: _p?.typeName,
            oldVal: _p?.oldVal,
            newVal: _p?.newVal,
            newValNeighbor: _p?.newValNeighbor,
            newValIsAfter: _p?.newValIsAfter,
            skipIfNewValExists: _p?.skipIfNewValExists
        };
    },
    altertsDictionaryStmt(_p) {
        return {
            dictname: _p?.dictname,
            options: _p?.options
        };
    },
    altertsConfigurationStmt(_p) {
        return {
            kind: _p?.kind,
            cfgname: _p?.cfgname,
            tokentype: _p?.tokentype,
            dicts: _p?.dicts,
            override: _p?.override,
            replace: _p?.replace,
            missing_ok: _p?.missing_ok
        };
    },
    createFdwStmt(_p) {
        return {
            fdwname: _p?.fdwname,
            func_options: _p?.func_options,
            options: _p?.options
        };
    },
    alterFdwStmt(_p) {
        return {
            fdwname: _p?.fdwname,
            func_options: _p?.func_options,
            options: _p?.options
        };
    },
    createForeignServerStmt(_p) {
        return {
            servername: _p?.servername,
            servertype: _p?.servertype,
            version: _p?.version,
            fdwname: _p?.fdwname,
            if_not_exists: _p?.if_not_exists,
            options: _p?.options
        };
    },
    alterForeignServerStmt(_p) {
        return {
            servername: _p?.servername,
            version: _p?.version,
            options: _p?.options,
            has_version: _p?.has_version
        };
    },
    createUserMappingStmt(_p) {
        return {
            user: _p?.user,
            servername: _p?.servername,
            if_not_exists: _p?.if_not_exists,
            options: _p?.options
        };
    },
    alterUserMappingStmt(_p) {
        return {
            user: _p?.user,
            servername: _p?.servername,
            options: _p?.options
        };
    },
    dropUserMappingStmt(_p) {
        return {
            user: _p?.user,
            servername: _p?.servername,
            missing_ok: _p?.missing_ok
        };
    },
    alterTableSpaceOptionsStmt(_p) {
        return {
            tablespacename: _p?.tablespacename,
            options: _p?.options,
            isReset: _p?.isReset
        };
    },
    alterTableMoveAllStmt(_p) {
        return {
            orig_tablespacename: _p?.orig_tablespacename,
            objtype: _p?.objtype,
            roles: _p?.roles,
            new_tablespacename: _p?.new_tablespacename,
            nowait: _p?.nowait
        };
    },
    secLabelStmt(_p) {
        return {
            objtype: _p?.objtype,
            object: _p?.object,
            provider: _p?.provider,
            label: _p?.label
        };
    },
    createForeignTableStmt(_p) {
        return {
            base: _p?.base,
            servername: _p?.servername,
            options: _p?.options
        };
    },
    importForeignSchemaStmt(_p) {
        return {
            server_name: _p?.server_name,
            remote_schema: _p?.remote_schema,
            local_schema: _p?.local_schema,
            list_type: _p?.list_type,
            table_list: _p?.table_list,
            options: _p?.options
        };
    },
    createExtensionStmt(_p) {
        return {
            extname: _p?.extname,
            if_not_exists: _p?.if_not_exists,
            options: _p?.options
        };
    },
    alterExtensionStmt(_p) {
        return {
            extname: _p?.extname,
            options: _p?.options
        };
    },
    alterExtensionContentsStmt(_p) {
        return {
            extname: _p?.extname,
            action: _p?.action,
            objtype: _p?.objtype,
            object: _p?.object
        };
    },
    createEventTrigStmt(_p) {
        return {
            trigname: _p?.trigname,
            eventname: _p?.eventname,
            whenclause: _p?.whenclause,
            funcname: _p?.funcname
        };
    },
    alterEventTrigStmt(_p) {
        return {
            trigname: _p?.trigname,
            tgenabled: _p?.tgenabled
        };
    },
    refreshMatViewStmt(_p) {
        return {
            concurrent: _p?.concurrent,
            skipData: _p?.skipData,
            relation: _p?.relation
        };
    },
    replicaIdentityStmt(_p) {
        return {
            identity_type: _p?.identity_type,
            name: _p?.name
        };
    },
    alterSystemStmt(_p) {
        return {
            setstmt: _p?.setstmt
        };
    },
    createPolicyStmt(_p) {
        return {
            policy_name: _p?.policy_name,
            table: _p?.table,
            cmd_name: _p?.cmd_name,
            permissive: _p?.permissive,
            roles: _p?.roles,
            qual: _p?.qual,
            with_check: _p?.with_check
        };
    },
    alterPolicyStmt(_p) {
        return {
            policy_name: _p?.policy_name,
            table: _p?.table,
            roles: _p?.roles,
            qual: _p?.qual,
            with_check: _p?.with_check
        };
    },
    createTransformStmt(_p) {
        return {
            replace: _p?.replace,
            type_name: _p?.type_name,
            lang: _p?.lang,
            fromsql: _p?.fromsql,
            tosql: _p?.tosql
        };
    },
    createAmStmt(_p) {
        return {
            amname: _p?.amname,
            handler_name: _p?.handler_name,
            amtype: _p?.amtype
        };
    },
    createPublicationStmt(_p) {
        return {
            pubname: _p?.pubname,
            options: _p?.options,
            tables: _p?.tables,
            for_all_tables: _p?.for_all_tables
        };
    },
    alterPublicationStmt(_p) {
        return {
            pubname: _p?.pubname,
            options: _p?.options,
            tables: _p?.tables,
            for_all_tables: _p?.for_all_tables,
            tableAction: _p?.tableAction
        };
    },
    createSubscriptionStmt(_p) {
        return {
            subname: _p?.subname,
            conninfo: _p?.conninfo,
            publication: _p?.publication,
            options: _p?.options
        };
    },
    alterSubscriptionStmt(_p) {
        return {
            kind: _p?.kind,
            subname: _p?.subname,
            conninfo: _p?.conninfo,
            publication: _p?.publication,
            options: _p?.options
        };
    },
    dropSubscriptionStmt(_p) {
        return {
            subname: _p?.subname,
            missing_ok: _p?.missing_ok,
            behavior: _p?.behavior
        };
    },
    createStatsStmt(_p) {
        return {
            defnames: _p?.defnames,
            stat_types: _p?.stat_types,
            exprs: _p?.exprs,
            relations: _p?.relations,
            stxcomment: _p?.stxcomment,
            if_not_exists: _p?.if_not_exists
        };
    },
    alterCollationStmt(_p) {
        return {
            collname: _p?.collname
        };
    },
    callStmt(_p) {
        return {
            funccall: _p?.funccall,
            funcexpr: _p?.funcexpr
        };
    },
    alterStatsStmt(_p) {
        return {
            defnames: _p?.defnames,
            stxstattarget: _p?.stxstattarget,
            missing_ok: _p?.missing_ok
        };
    },
    aExpr(_p) {
        return {
            kind: _p?.kind,
            name: _p?.name,
            lexpr: _p?.lexpr,
            rexpr: _p?.rexpr,
            location: _p?.location
        };
    },
    columnRef(_p) {
        return {
            fields: _p?.fields,
            location: _p?.location
        };
    },
    paramRef(_p) {
        return {
            number: _p?.number,
            location: _p?.location
        };
    },
    aConst(_p) {
        return {
            val: _p?.val,
            location: _p?.location
        };
    },
    funcCall(_p) {
        return {
            funcname: _p?.funcname,
            args: _p?.args,
            agg_order: _p?.agg_order,
            agg_filter: _p?.agg_filter,
            agg_within_group: _p?.agg_within_group,
            agg_star: _p?.agg_star,
            agg_distinct: _p?.agg_distinct,
            func_variadic: _p?.func_variadic,
            over: _p?.over,
            location: _p?.location
        };
    },
    aStar(_p) {
        return {};
    },
    aIndices(_p) {
        return {
            is_slice: _p?.is_slice,
            lidx: _p?.lidx,
            uidx: _p?.uidx
        };
    },
    aIndirection(_p) {
        return {
            arg: _p?.arg,
            indirection: _p?.indirection
        };
    },
    aArrayExpr(_p) {
        return {
            elements: _p?.elements,
            location: _p?.location
        };
    },
    resTarget(_p) {
        return {
            name: _p?.name,
            indirection: _p?.indirection,
            val: _p?.val,
            location: _p?.location
        };
    },
    multiAssignRef(_p) {
        return {
            source: _p?.source,
            colno: _p?.colno,
            ncolumns: _p?.ncolumns
        };
    },
    typeCast(_p) {
        return {
            arg: _p?.arg,
            typeName: _p?.typeName,
            location: _p?.location
        };
    },
    collateClause(_p) {
        return {
            arg: _p?.arg,
            collname: _p?.collname,
            location: _p?.location
        };
    },
    sortBy(_p) {
        return {
            node: _p?.node,
            sortby_dir: _p?.sortby_dir,
            sortby_nulls: _p?.sortby_nulls,
            useOp: _p?.useOp,
            location: _p?.location
        };
    },
    windowDef(_p) {
        return {
            name: _p?.name,
            refname: _p?.refname,
            partitionClause: _p?.partitionClause,
            orderClause: _p?.orderClause,
            frameOptions: _p?.frameOptions,
            startOffset: _p?.startOffset,
            endOffset: _p?.endOffset,
            location: _p?.location
        };
    },
    rangeSubselect(_p) {
        return {
            lateral: _p?.lateral,
            subquery: _p?.subquery,
            alias: _p?.alias
        };
    },
    rangeFunction(_p) {
        return {
            lateral: _p?.lateral,
            ordinality: _p?.ordinality,
            is_rowsfrom: _p?.is_rowsfrom,
            functions: _p?.functions,
            alias: _p?.alias,
            coldeflist: _p?.coldeflist
        };
    },
    rangeTableSample(_p) {
        return {
            relation: _p?.relation,
            method: _p?.method,
            args: _p?.args,
            repeatable: _p?.repeatable,
            location: _p?.location
        };
    },
    rangeTableFunc(_p) {
        return {
            lateral: _p?.lateral,
            docexpr: _p?.docexpr,
            rowexpr: _p?.rowexpr,
            namespaces: _p?.namespaces,
            columns: _p?.columns,
            alias: _p?.alias,
            location: _p?.location
        };
    },
    rangeTableFuncCol(_p) {
        return {
            colname: _p?.colname,
            typeName: _p?.typeName,
            for_ordinality: _p?.for_ordinality,
            is_not_null: _p?.is_not_null,
            colexpr: _p?.colexpr,
            coldefexpr: _p?.coldefexpr,
            location: _p?.location
        };
    },
    typeName(_p) {
        return {
            names: _p?.names,
            typeOid: _p?.typeOid,
            setof: _p?.setof,
            pct_type: _p?.pct_type,
            typmods: _p?.typmods,
            typemod: _p?.typemod,
            arrayBounds: _p?.arrayBounds,
            location: _p?.location
        };
    },
    columnDef(_p) {
        return {
            colname: _p?.colname,
            typeName: _p?.typeName,
            inhcount: _p?.inhcount,
            is_local: _p?.is_local,
            is_not_null: _p?.is_not_null,
            is_from_type: _p?.is_from_type,
            storage: _p?.storage,
            raw_default: _p?.raw_default,
            cooked_default: _p?.cooked_default,
            identity: _p?.identity,
            identitySequence: _p?.identitySequence,
            generated: _p?.generated,
            collClause: _p?.collClause,
            collOid: _p?.collOid,
            constraints: _p?.constraints,
            fdwoptions: _p?.fdwoptions,
            location: _p?.location
        };
    },
    indexElem(_p) {
        return {
            name: _p?.name,
            expr: _p?.expr,
            indexcolname: _p?.indexcolname,
            collation: _p?.collation,
            opclass: _p?.opclass,
            opclassopts: _p?.opclassopts,
            ordering: _p?.ordering,
            nulls_ordering: _p?.nulls_ordering
        };
    },
    constraint(_p) {
        return {
            contype: _p?.contype,
            conname: _p?.conname,
            deferrable: _p?.deferrable,
            initdeferred: _p?.initdeferred,
            location: _p?.location,
            is_no_inherit: _p?.is_no_inherit,
            raw_expr: _p?.raw_expr,
            cooked_expr: _p?.cooked_expr,
            generated_when: _p?.generated_when,
            keys: _p?.keys,
            including: _p?.including,
            exclusions: _p?.exclusions,
            options: _p?.options,
            indexname: _p?.indexname,
            indexspace: _p?.indexspace,
            reset_default_tblspc: _p?.reset_default_tblspc,
            access_method: _p?.access_method,
            where_clause: _p?.where_clause,
            pktable: _p?.pktable,
            fk_attrs: _p?.fk_attrs,
            pk_attrs: _p?.pk_attrs,
            fk_matchtype: _p?.fk_matchtype,
            fk_upd_action: _p?.fk_upd_action,
            fk_del_action: _p?.fk_del_action,
            old_conpfeqop: _p?.old_conpfeqop,
            old_pktable_oid: _p?.old_pktable_oid,
            skip_validation: _p?.skip_validation,
            initially_valid: _p?.initially_valid
        };
    },
    defElem(_p) {
        return {
            defnamespace: _p?.defnamespace,
            defname: _p?.defname,
            arg: _p?.arg,
            defaction: _p?.defaction,
            location: _p?.location
        };
    },
    rangeTblEntry(_p) {
        return {
            rtekind: _p?.rtekind,
            relid: _p?.relid,
            relkind: _p?.relkind,
            rellockmode: _p?.rellockmode,
            tablesample: _p?.tablesample,
            subquery: _p?.subquery,
            security_barrier: _p?.security_barrier,
            jointype: _p?.jointype,
            joinmergedcols: _p?.joinmergedcols,
            joinaliasvars: _p?.joinaliasvars,
            joinleftcols: _p?.joinleftcols,
            joinrightcols: _p?.joinrightcols,
            functions: _p?.functions,
            funcordinality: _p?.funcordinality,
            tablefunc: _p?.tablefunc,
            values_lists: _p?.values_lists,
            ctename: _p?.ctename,
            ctelevelsup: _p?.ctelevelsup,
            self_reference: _p?.self_reference,
            coltypes: _p?.coltypes,
            coltypmods: _p?.coltypmods,
            colcollations: _p?.colcollations,
            enrname: _p?.enrname,
            enrtuples: _p?.enrtuples,
            alias: _p?.alias,
            eref: _p?.eref,
            lateral: _p?.lateral,
            inh: _p?.inh,
            inFromCl: _p?.inFromCl,
            requiredPerms: _p?.requiredPerms,
            checkAsUser: _p?.checkAsUser,
            selectedCols: _p?.selectedCols,
            insertedCols: _p?.insertedCols,
            updatedCols: _p?.updatedCols,
            extraUpdatedCols: _p?.extraUpdatedCols,
            securityQuals: _p?.securityQuals
        };
    },
    rangeTblFunction(_p) {
        return {
            funcexpr: _p?.funcexpr,
            funccolcount: _p?.funccolcount,
            funccolnames: _p?.funccolnames,
            funccoltypes: _p?.funccoltypes,
            funccoltypmods: _p?.funccoltypmods,
            funccolcollations: _p?.funccolcollations,
            funcparams: _p?.funcparams
        };
    },
    tableSampleClause(_p) {
        return {
            tsmhandler: _p?.tsmhandler,
            args: _p?.args,
            repeatable: _p?.repeatable
        };
    },
    withCheckOption(_p) {
        return {
            kind: _p?.kind,
            relname: _p?.relname,
            polname: _p?.polname,
            qual: _p?.qual,
            cascaded: _p?.cascaded
        };
    },
    sortGroupClause(_p) {
        return {
            tleSortGroupRef: _p?.tleSortGroupRef,
            eqop: _p?.eqop,
            sortop: _p?.sortop,
            nulls_first: _p?.nulls_first,
            hashable: _p?.hashable
        };
    },
    groupingSet(_p) {
        return {
            kind: _p?.kind,
            content: _p?.content,
            location: _p?.location
        };
    },
    windowClause(_p) {
        return {
            name: _p?.name,
            refname: _p?.refname,
            partitionClause: _p?.partitionClause,
            orderClause: _p?.orderClause,
            frameOptions: _p?.frameOptions,
            startOffset: _p?.startOffset,
            endOffset: _p?.endOffset,
            startInRangeFunc: _p?.startInRangeFunc,
            endInRangeFunc: _p?.endInRangeFunc,
            inRangeColl: _p?.inRangeColl,
            inRangeAsc: _p?.inRangeAsc,
            inRangeNullsFirst: _p?.inRangeNullsFirst,
            winref: _p?.winref,
            copiedOrder: _p?.copiedOrder
        };
    },
    objectWithArgs(_p) {
        return {
            objname: _p?.objname,
            objargs: _p?.objargs,
            args_unspecified: _p?.args_unspecified
        };
    },
    accessPriv(_p) {
        return {
            priv_name: _p?.priv_name,
            cols: _p?.cols
        };
    },
    createOpClassItem(_p) {
        return {
            itemtype: _p?.itemtype,
            name: _p?.name,
            number: _p?.number,
            order_family: _p?.order_family,
            class_args: _p?.class_args,
            storedtype: _p?.storedtype
        };
    },
    tableLikeClause(_p) {
        return {
            relation: _p?.relation,
            options: _p?.options,
            relationOid: _p?.relationOid
        };
    },
    functionParameter(_p) {
        return {
            name: _p?.name,
            argType: _p?.argType,
            mode: _p?.mode,
            defexpr: _p?.defexpr
        };
    },
    lockingClause(_p) {
        return {
            lockedRels: _p?.lockedRels,
            strength: _p?.strength,
            waitPolicy: _p?.waitPolicy
        };
    },
    rowMarkClause(_p) {
        return {
            rti: _p?.rti,
            strength: _p?.strength,
            waitPolicy: _p?.waitPolicy,
            pushedDown: _p?.pushedDown
        };
    },
    xmlSerialize(_p) {
        return {
            xmloption: _p?.xmloption,
            expr: _p?.expr,
            typeName: _p?.typeName,
            location: _p?.location
        };
    },
    withClause(_p) {
        return {
            ctes: _p?.ctes,
            recursive: _p?.recursive,
            location: _p?.location
        };
    },
    inferClause(_p) {
        return {
            indexElems: _p?.indexElems,
            whereClause: _p?.whereClause,
            conname: _p?.conname,
            location: _p?.location
        };
    },
    onConflictClause(_p) {
        return {
            action: _p?.action,
            infer: _p?.infer,
            targetList: _p?.targetList,
            whereClause: _p?.whereClause,
            location: _p?.location
        };
    },
    commonTableExpr(_p) {
        return {
            ctename: _p?.ctename,
            aliascolnames: _p?.aliascolnames,
            ctematerialized: _p?.ctematerialized,
            ctequery: _p?.ctequery,
            location: _p?.location,
            cterecursive: _p?.cterecursive,
            cterefcount: _p?.cterefcount,
            ctecolnames: _p?.ctecolnames,
            ctecoltypes: _p?.ctecoltypes,
            ctecoltypmods: _p?.ctecoltypmods,
            ctecolcollations: _p?.ctecolcollations
        };
    },
    roleSpec(_p) {
        return {
            roletype: _p?.roletype,
            rolename: _p?.rolename,
            location: _p?.location
        };
    },
    triggerTransition(_p) {
        return {
            name: _p?.name,
            isNew: _p?.isNew,
            isTable: _p?.isTable
        };
    },
    partitionElem(_p) {
        return {
            name: _p?.name,
            expr: _p?.expr,
            collation: _p?.collation,
            opclass: _p?.opclass,
            location: _p?.location
        };
    },
    partitionSpec(_p) {
        return {
            strategy: _p?.strategy,
            partParams: _p?.partParams,
            location: _p?.location
        };
    },
    partitionBoundSpec(_p) {
        return {
            strategy: _p?.strategy,
            is_default: _p?.is_default,
            modulus: _p?.modulus,
            remainder: _p?.remainder,
            listdatums: _p?.listdatums,
            lowerdatums: _p?.lowerdatums,
            upperdatums: _p?.upperdatums,
            location: _p?.location
        };
    },
    partitionRangeDatum(_p) {
        return {
            kind: _p?.kind,
            value: _p?.value,
            location: _p?.location
        };
    },
    partitionCmd(_p) {
        return {
            name: _p?.name,
            bound: _p?.bound
        };
    },
    vacuumRelation(_p) {
        return {
            relation: _p?.relation,
            oid: _p?.oid,
            va_cols: _p?.va_cols
        };
    },
    inlineCodeBlock(_p) {
        return {
            source_text: _p?.source_text,
            langOid: _p?.langOid,
            langIsTrusted: _p?.langIsTrusted,
            atomic: _p?.atomic
        };
    },
    callContext(_p) {
        return {
            atomic: _p?.atomic
        };
    },
    scanToken(_p) {
        return {
            start: _p?.start,
            end: _p?.end,
            token: _p?.token,
            keywordKind: _p?.keywordKind
        };
    }
};
