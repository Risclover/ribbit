var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var pg_connection_from_env_exports = {};
__export(pg_connection_from_env_exports, {
  default: () => pg_connection_from_env_default,
  getConnectionStringFromEnv: () => getConnectionStringFromEnv,
  getPgConnectionFromEnv: () => getPgConnectionFromEnv
});
module.exports = __toCommonJS(pg_connection_from_env_exports);
var import_pg_connection_string = require("pg-connection-string");
var getPgConnectionFromEnv = (opts = {}) => {
  const {
    user,
    env = process.env,
    database,
    fallbackDefaults: defaults = {}
  } = opts;
  const uri = env.POSTGRES_URI || env.PG_URI || env.DATABASE_URL || env.DATABASE_URI;
  if (uri) {
    const uriObj = (0, import_pg_connection_string.parse)(uri);
    return {
      ...uriObj,
      database: database || uriObj.database,
      user: user || uriObj.user,
      ssl: uriObj.ssl ? { ...uriObj.ssl, rejectUnauthorized: false } : false
    };
  } else {
    return {
      host: env.POSTGRES_HOST || defaults.host || "localhost",
      user: user || env.POSTGRES_USER || env.POSTGRES_USERNAME || defaults.user || "postgres",
      port: env.POSTGRES_PORT || defaults.port || 5432,
      password: env.POSTGRES_PASS || env.POSTGRES_PASSWORD || defaults.password || "",
      database: database || env.POSTGRES_DATABASE || env.POSTGRES_DB || defaults.database || defaults.databaseName || "postgres",
      ssl: env.POSTGRES_SSL ? { rejectUnauthorized: false } : false
    };
  }
};
var getConnectionStringFromEnv = (opts = {}) => {
  var _a;
  const env = opts.env || process.env;
  const uri = env.POSTGRES_URI || env.PG_URI || env.DATABASE_URL || env.DATABASE_URI;
  const uriParams = ((_a = (uri || "").split("?")) == null ? void 0 : _a[1]) || "";
  const { host, password, port, database, user } = getPgConnectionFromEnv(opts);
  return `postgresql://${user}:${password}@${host}:${port}/${database}${uriParams ? `?${uriParams}` : ""}`;
};
var pg_connection_from_env_default = getPgConnectionFromEnv;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getConnectionStringFromEnv,
  getPgConnectionFromEnv
});
