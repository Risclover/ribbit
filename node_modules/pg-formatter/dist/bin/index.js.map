{"version":3,"sources":["../../src/bin/index.js"],"names":["argv","yargs","usage","options","anonymize","default","description","type","choices","inplace","alias","placeholder","spaces","tabs","check","parameters","filePaths","_","length","Error","help","wrap","parse","files","config","option","forEach","file","data","fs","readFileSync","result","writeFileSync","process","stdout","write"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport fs from 'fs';\nimport yargs from 'yargs';\nimport format from '../format';\n\nconst argv = yargs\n  .usage('Formats SQL files')\n  .options({\n    anonymize: {\n      default: false,\n      description: 'Obscure all literals in queries, useful to hide confidential data before formatting.',\n      type: 'boolean',\n    },\n    'comma-break': {\n      default: false,\n      description: 'Add a newline after each comma in an insert statement.',\n      type: 'boolean',\n    },\n    'function-case': {\n      choices: ['unchanged', 'lowercase', 'uppercase', 'capitalize'],\n      default: 'unchanged',\n      description: 'Change the case of the function names.',\n      type: 'string',\n    },\n    inplace: {\n      alias: 'i',\n      default: false,\n      description: 'Override input file with formatted content.',\n      type: 'boolean',\n    },\n    'keyword-case': {\n      choices: ['unchanged', 'lowercase', 'uppercase', 'capitalize'],\n      default: 'unchanged',\n      description: 'Change the case of the reserved keyword.',\n      type: 'string',\n    },\n    'no-rc-file': {\n      default: false,\n      description: 'Do not read ~/.pg_format automatically.',\n      type: 'boolean',\n    },\n    placeholder: {\n      description: 'Regex to find code that must not be changed.',\n      type: 'string',\n    },\n    spaces: {\n      default: 4,\n      description: 'Number of spaces to indent the code.',\n      type: 'number',\n    },\n    'strip-comments': {\n      default: false,\n      description: 'Remove any comment from SQL code.',\n      type: 'boolean',\n    },\n    tabs: {\n      default: false,\n      description: 'Use tabs instead of spaces. When true, the spaces option is ignored.',\n      type: 'boolean',\n    },\n  })\n  .check((parameters) => {\n    const filePaths = parameters._;\n    if (filePaths.length === 0) {\n      throw new Error('No files given');\n    } else {\n      return true;\n    }\n  })\n  .help()\n  .wrap(80)\n  .parse();\n\nconst files = argv._;\n\nif (files.length === 0) {\n  throw new Error('No files given');\n}\n\nconst options = ['anonymize', 'commaBreak', 'functionCase', 'keywordCase', 'noRcFile', 'placeholder', 'spaces', 'stripComments', 'tabs'];\nconst config = {};\n\nfor (const option of options) {\n  config[option] = argv[option];\n}\n\nfiles.forEach((file) => {\n  const data = fs.readFileSync(file);\n  const result = format(data, config);\n\n  if (argv.inplace) {\n    fs.writeFileSync(file, result);\n  } else {\n    process.stdout.write(result);\n  }\n});\n"],"file":"index.js"}