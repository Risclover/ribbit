{"version":3,"sources":["../src/format.js"],"names":["executablePath","__dirname","defaultConfiguration","anonymize","functionCase","keywordCase","noRcFile","spaces","stripComments","tabs","createConfiguration","userConfiguration","functionCaseOptionValueMap","capitalize","lowercase","unchanged","uppercase","keywordCaseOptionValueMap","createCommandLineArgs","configuration","args","push","placeholder","commaBreak","join","sql","result","encoding","input"],"mappings":";;;;;;;AAEA;;AAGA;;AAGA;;AA4BA,MAAMA,cAAc,GAAG,mBAAQC,SAAR,EAAmB,wBAAnB,CAAvB;AAEA,MAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,SAAS,EAAE,KADgB;AAE3BC,EAAAA,YAAY,EAAE,WAFa;AAG3BC,EAAAA,WAAW,EAAE,WAHc;AAI3BC,EAAAA,QAAQ,EAAE,KAJiB;AAK3BC,EAAAA,MAAM,EAAE,CALmB;AAM3BC,EAAAA,aAAa,EAAE,KANY;AAO3BC,EAAAA,IAAI,EAAE;AAPqB,CAA7B;;AAUA,MAAMC,mBAAmB,GAAG,CAACC,iBAAwC,GAAGT,oBAA5C,KAAwF;AAClH;AACA,SAAO,EACL,GAAGA,oBADE;AAEL,OAAGS;AAFE,GAAP;AAID,CAND;;AAQA,MAAMC,0BAA0B,GAAG;AACjCC,EAAAA,UAAU,EAAE,CADqB;AAEjCC,EAAAA,SAAS,EAAE,CAFsB;AAGjCC,EAAAA,SAAS,EAAE,CAHsB;AAIjCC,EAAAA,SAAS,EAAE;AAJsB,CAAnC;AAOA,MAAMC,yBAAyB,GAAGL,0BAAlC;;AAEA,MAAMM,qBAAqB,GAAIC,aAAD,IAA8C;AAC1E,QAAMC,IAAI,GAAG,EAAb;;AAEA,MAAID,aAAa,CAAChB,SAAlB,EAA6B;AAC3BiB,IAAAA,IAAI,CAACC,IAAL,CAAU,aAAV;AACD;;AAED,MAAIF,aAAa,CAACf,YAAlB,EAAgC;AAC9BgB,IAAAA,IAAI,CAACC,IAAL,CAAU,qBAAqBT,0BAA0B,CAACO,aAAa,CAACf,YAAf,CAAzD;AACD;;AAED,MAAIe,aAAa,CAACd,WAAlB,EAA+B;AAC7Be,IAAAA,IAAI,CAACC,IAAL,CAAU,oBAAoBJ,yBAAyB,CAACE,aAAa,CAACd,WAAf,CAAvD;AACD;;AAED,MAAIc,aAAa,CAACb,QAAlB,EAA4B;AAC1Bc,IAAAA,IAAI,CAACC,IAAL,CAAU,aAAV;AACD;;AAED,MAAIF,aAAa,CAACG,WAAlB,EAA+B;AAC7BF,IAAAA,IAAI,CAACC,IAAL,CAAU,mBAAmB,uBAAM,CAACF,aAAa,CAACG,WAAf,CAAN,CAA7B;AACD;;AAED,MAAIH,aAAa,CAACZ,MAAlB,EAA0B;AACxBa,IAAAA,IAAI,CAACC,IAAL,CAAU,cAAcF,aAAa,CAACZ,MAAtC;AACD;;AAED,MAAIY,aAAa,CAACX,aAAlB,EAAiC;AAC/BY,IAAAA,IAAI,CAACC,IAAL,CAAU,aAAV;AACD;;AAED,MAAIF,aAAa,CAACV,IAAlB,EAAwB;AACtBW,IAAAA,IAAI,CAACC,IAAL,CAAU,QAAV;AACD;;AAED,MAAIF,aAAa,CAACI,UAAlB,EAA8B;AAC5BH,IAAAA,IAAI,CAACC,IAAL,CAAU,eAAV;AACD;;AAED,SAAOD,IAAI,CAACI,IAAL,CAAU,GAAV,CAAP;AACD,CAxCD;;eA0Ce,CAACC,GAAD,EAAcd,iBAAd,KAA4D;AACzE,QAAMQ,aAAa,GAAGT,mBAAmB,CAACC,iBAAD,CAAzC;AACA,QAAMS,IAAI,GAAGF,qBAAqB,CAACC,aAAD,CAAlC;AAEA,QAAMO,MAAM,GAAG,6BAAS,UAAU1B,cAAV,GAA2B,GAA3B,GAAiCoB,IAA1C,EAAgD;AAC7DO,IAAAA,QAAQ,EAAE,MADmD;AAE7DC,IAAAA,KAAK,EAAEH;AAFsD,GAAhD,CAAf;AAKA,SAAOC,MAAP;AACD,C","sourcesContent":["// @flow\n\nimport {\n  execSync,\n} from 'child_process';\nimport {\n  resolve,\n} from 'path';\nimport {\n  quote,\n} from 'shell-quote';\n\ntype UserConfigurationType = {|\n  +anonymize?: boolean,\n  +functionCase?: 'unchanged' | 'lowercase' | 'uppercase' | 'capitalize',\n  +keywordCase?: 'unchanged' | 'lowercase' | 'uppercase' | 'capitalize',\n  +noRcFile?: boolean,\n  +placeholder?: string,\n  +spaces?: number,\n  +stripComments?: boolean,\n  +tabs?: boolean,\n  +commaBreak?: boolean,\n|};\n\ntype ConfigurationType = {|\n  +anonymize: boolean,\n  +functionCase: 'unchanged' | 'lowercase' | 'uppercase' | 'capitalize',\n  +keywordCase: 'unchanged' | 'lowercase' | 'uppercase' | 'capitalize',\n  +noRcFile: boolean,\n  +placeholder?: string,\n  +spaces: number,\n  +stripComments: boolean,\n  +tabs: boolean,\n  +commaBreak?: boolean,\n|};\n\nconst executablePath = resolve(__dirname, 'pg-formatter/pg_format');\n\nconst defaultConfiguration = {\n  anonymize: false,\n  functionCase: 'unchanged',\n  keywordCase: 'unchanged',\n  noRcFile: false,\n  spaces: 4,\n  stripComments: false,\n  tabs: false,\n};\n\nconst createConfiguration = (userConfiguration: UserConfigurationType = defaultConfiguration): ConfigurationType => {\n  // $FlowFixMe\n  return {\n    ...defaultConfiguration,\n    ...userConfiguration,\n  };\n};\n\nconst functionCaseOptionValueMap = {\n  capitalize: 3,\n  lowercase: 1,\n  unchanged: 0,\n  uppercase: 2,\n};\n\nconst keywordCaseOptionValueMap = functionCaseOptionValueMap;\n\nconst createCommandLineArgs = (configuration: ConfigurationType): string => {\n  const args = [];\n\n  if (configuration.anonymize) {\n    args.push('--anonymize');\n  }\n\n  if (configuration.functionCase) {\n    args.push('--function-case ' + functionCaseOptionValueMap[configuration.functionCase]);\n  }\n\n  if (configuration.keywordCase) {\n    args.push('--keyword-case ' + keywordCaseOptionValueMap[configuration.keywordCase]);\n  }\n\n  if (configuration.noRcFile) {\n    args.push('--no-rcfile');\n  }\n\n  if (configuration.placeholder) {\n    args.push('--placeholder ' + quote([configuration.placeholder]));\n  }\n\n  if (configuration.spaces) {\n    args.push('--spaces ' + configuration.spaces);\n  }\n\n  if (configuration.stripComments) {\n    args.push('--nocomment');\n  }\n\n  if (configuration.tabs) {\n    args.push('--tabs');\n  }\n\n  if (configuration.commaBreak) {\n    args.push('--comma-break');\n  }\n\n  return args.join(' ');\n};\n\nexport default (sql: string, userConfiguration?: UserConfigurationType) => {\n  const configuration = createConfiguration(userConfiguration);\n  const args = createCommandLineArgs(configuration);\n\n  const result = execSync('perl ' + executablePath + ' ' + args, {\n    encoding: 'utf8',\n    input: sql,\n  });\n\n  return result;\n};\n"],"file":"format.js"}