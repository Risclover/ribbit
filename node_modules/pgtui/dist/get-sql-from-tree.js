var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/get-sql-from-tree.ts
var get_sql_from_tree_exports = {};
__export(get_sql_from_tree_exports, {
  default: () => get_sql_from_tree_default,
  getSQLFromTree: () => getSQLFromTree
});
module.exports = __toCommonJS(get_sql_from_tree_exports);
var render = (objs) => {
  let queryObjs;
  if (Array.isArray(objs)) {
    queryObjs = objs;
  } else {
    const vals = Object.values(objs);
    if (typeof vals === "string") {
      queryObjs = [objs];
    } else {
      queryObjs = vals;
    }
  }
  return queryObjs.map((q) => q.query).join("\n");
};
var getSQLFromTree = (tree) => {
  let sql = render(tree.misc);
  for (const schema of Object.values(tree.schemas)) {
    sql += render(schema.functions);
    for (const table of Object.values(schema.tables)) {
      sql += render(table.sequences);
      sql += render(table);
      sql += render(table.alterations);
      sql += render(table.triggers);
    }
    sql += render(schema.views);
  }
};
var get_sql_from_tree_default = getSQLFromTree;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getSQLFromTree
});
//# sourceMappingURL=get-sql-from-tree.js.map