{"version":3,"sources":["../src/get-sql-from-tree.ts"],"sourcesContent":["import { DatabaseTree, Schema } from \"types\"\n\nconst render = (\n  objs:\n    | Array<{ query: string }>\n    | { query: string }\n    | {\n        [k: string]: { query: string }\n      }\n) => {\n  let queryObjs: Array<{ query: string }>\n  if (Array.isArray(objs)) {\n    queryObjs = objs\n  } else {\n    const vals = Object.values(objs)\n    if (typeof vals === \"string\") {\n      queryObjs = [objs as any]\n    } else {\n      queryObjs = vals\n    }\n  }\n  return queryObjs.map((q) => q.query).join(\"\\n\")\n}\n\nexport const getSQLFromTree = (tree: DatabaseTree) => {\n  let sql = render(tree.misc)\n  for (const schema of Object.values(tree.schemas)) {\n    sql += render(schema.functions)\n    for (const table of Object.values(schema.tables)) {\n      sql += render(table.sequences)\n      sql += render(table)\n      sql += render(table.alterations)\n      sql += render(table.triggers)\n    }\n    sql += render(schema.views)\n  }\n}\n\nexport default getSQLFromTree\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAM,SAAS,CACb,SAMG;AACH,MAAI;AACJ,MAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,gBAAY;AAAA,EACd,OAAO;AACL,UAAM,OAAO,OAAO,OAAO,IAAI;AAC/B,QAAI,OAAO,SAAS,UAAU;AAC5B,kBAAY,CAAC,IAAW;AAAA,IAC1B,OAAO;AACL,kBAAY;AAAA,IACd;AAAA,EACF;AACA,SAAO,UAAU,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,IAAI;AAChD;AAEO,IAAM,iBAAiB,CAAC,SAAuB;AACpD,MAAI,MAAM,OAAO,KAAK,IAAI;AAC1B,aAAW,UAAU,OAAO,OAAO,KAAK,OAAO,GAAG;AAChD,WAAO,OAAO,OAAO,SAAS;AAC9B,eAAW,SAAS,OAAO,OAAO,OAAO,MAAM,GAAG;AAChD,aAAO,OAAO,MAAM,SAAS;AAC7B,aAAO,OAAO,KAAK;AACnB,aAAO,OAAO,MAAM,WAAW;AAC/B,aAAO,OAAO,MAAM,QAAQ;AAAA,IAC9B;AACA,WAAO,OAAO,OAAO,KAAK;AAAA,EAC5B;AACF;AAEA,IAAO,4BAAQ;","names":[]}