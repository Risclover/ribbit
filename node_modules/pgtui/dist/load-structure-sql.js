var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/load-structure-sql.ts
var load_structure_sql_exports = {};
__export(load_structure_sql_exports, {
  default: () => load_structure_sql_default,
  loadStructureSQL: () => loadStructureSQL
});
module.exports = __toCommonJS(load_structure_sql_exports);
var import_execa = __toESM(require("execa"));
var import_pgknexlove = __toESM(require("pgknexlove"));
var import_docker_host_ip = __toESM(require("docker-host-ip"));
var loadStructureSQL = async (connectionInfo) => {
  let { host, port, user, password, database } = __spreadValues(__spreadValues({}, import_pgknexlove.default.default.getConnectionInfo()), connectionInfo);
  if (process.env.RUNNING_IN_DOCKER && !process.env.POSTGRES_HOST && !process.env.DATABASE_URL) {
    host = await new Promise((resolve, reject) => {
      (0, import_docker_host_ip.default)((err, ip) => {
        if (err)
          return reject(err);
        resolve(ip);
      });
    });
    console.log(`Detected we're in docker and no host has been set, using automatically detected host "${host}". Manually set POSTGRES_HOST or DATABASE_URL to prevent default from being overridden.`);
  }
  const result = await (0, import_execa.default)("pg_dump", ["-h", host, "-p", port, "-U", user, "-s", database].map((a) => a.toString()));
  return result.stdout;
};
var load_structure_sql_default = loadStructureSQL;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  loadStructureSQL
});
//# sourceMappingURL=load-structure-sql.js.map