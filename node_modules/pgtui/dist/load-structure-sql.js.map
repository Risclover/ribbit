{"version":3,"sources":["../src/load-structure-sql.ts"],"sourcesContent":["import execa from \"execa\"\nimport pgknexlove from \"pgknexlove\"\nimport getDockerHost from \"docker-host-ip\"\n\nexport const loadStructureSQL = async (connectionInfo?: any) => {\n  let { host, port, user, password, database } = {\n    ...pgknexlove.default.getConnectionInfo(),\n    ...connectionInfo,\n  } as any\n\n  if (\n    process.env.RUNNING_IN_DOCKER &&\n    !process.env.POSTGRES_HOST &&\n    !process.env.DATABASE_URL\n  ) {\n    host = await new Promise((resolve, reject) => {\n      getDockerHost((err, ip) => {\n        if (err) return reject(err)\n        resolve(ip)\n      })\n    })\n    console.log(\n      `Detected we're in docker and no host has been set, using automatically detected host \"${host}\". Manually set POSTGRES_HOST or DATABASE_URL to prevent default from being overridden.`\n    )\n  }\n\n  const result = await execa(\n    \"pg_dump\",\n    [\"-h\", host, \"-p\", port, \"-U\", user, \"-s\", database].map((a) =>\n      a.toString()\n    )\n  )\n\n  return result.stdout\n}\n\nexport default loadStructureSQL\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,wBAAuB;AACvB,4BAA0B;AAEnB,IAAM,mBAAmB,OAAO,mBAAyB;AAC9D,MAAI,EAAE,MAAM,MAAM,MAAM,UAAU,aAAa,kCAC1C,0BAAW,QAAQ,kBAAkB,IACrC;AAGL,MACE,QAAQ,IAAI,qBACZ,CAAC,QAAQ,IAAI,iBACb,CAAC,QAAQ,IAAI,cACb;AACA,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C,yCAAc,CAAC,KAAK,OAAO;AACzB,YAAI;AAAK,iBAAO,OAAO,GAAG;AAC1B,gBAAQ,EAAE;AAAA,MACZ,CAAC;AAAA,IACH,CAAC;AACD,YAAQ,IACN,yFAAyF,6FAC3F;AAAA,EACF;AAEA,QAAM,SAAS,MAAM,0BACnB,WACA,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,QAAQ,EAAE,IAAI,CAAC,MACxD,EAAE,SAAS,CACb,CACF;AAEA,SAAO,OAAO;AAChB;AAEA,IAAO,6BAAQ;","names":[]}