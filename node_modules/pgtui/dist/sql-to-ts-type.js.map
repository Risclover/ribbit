{"version":3,"sources":["../src/sql-to-ts-type.ts"],"sourcesContent":["export const sqlToTsType = (type: string, canBeNull: boolean): string => {\n  let tsType = null\n  const typeWithoutArray = type.replace(/\\[\\]$/, \"\")\n  const isTypeArray = type.endsWith(\"[]\")\n\n  switch (typeWithoutArray) {\n    case \"text\":\n    case \"uuid\":\n    case \"varchar\":\n      tsType = \"string\"\n      break\n\n    case \"int4\":\n    case \"int\":\n      tsType = \"number\"\n      break\n\n    case \"jsonb\":\n      tsType = \"any\"\n      break\n\n    case \"timestamptz\":\n    case \"timestamp\":\n      tsType = \"Date\"\n      break\n\n    case \"bool\":\n    case \"boolean\":\n      tsType = \"boolean\"\n      break\n\n    default:\n      tsType = \"any\"\n      break\n  }\n\n  if (isTypeArray) {\n    tsType += \"[]\"\n  }\n\n  if (tsType === \"any\") {\n    return tsType\n  }\n\n  return canBeNull ? `${tsType} | null` : tsType\n}\n\nexport default sqlToTsType\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,IAAM,cAAc,CAAC,MAAc,cAA+B;AACvE,MAAI,SAAS;AACb,QAAM,mBAAmB,KAAK,QAAQ,SAAS,EAAE;AACjD,QAAM,cAAc,KAAK,SAAS,IAAI;AAEtC,UAAQ;AAAA,SACD;AAAA,SACA;AAAA,SACA;AACH,eAAS;AACT;AAAA,SAEG;AAAA,SACA;AACH,eAAS;AACT;AAAA,SAEG;AACH,eAAS;AACT;AAAA,SAEG;AAAA,SACA;AACH,eAAS;AACT;AAAA,SAEG;AAAA,SACA;AACH,eAAS;AACT;AAAA;AAGA,eAAS;AACT;AAAA;AAGJ,MAAI,aAAa;AACf,cAAU;AAAA,EACZ;AAEA,MAAI,WAAW,OAAO;AACpB,WAAO;AAAA,EACT;AAEA,SAAO,YAAY,GAAG,kBAAkB;AAC1C;AAEA,IAAO,yBAAQ;","names":[]}