{"version":3,"sources":["../../src/tree-to-typescript-models/index.ts","../../src/snake-to-pascal.ts","../../src/sql-to-ts-type.ts"],"sourcesContent":["/**\n * Converts database into types similar to kanel.js\n *\n * There are a couple different types of files.\n *\n * Each schema has a subdirectory.\n *\n **/\n\nimport { DatabaseTree } from \"types\"\nimport { Project, ModuleDeclarationKind } from \"ts-morph\"\nimport snakeToPascal from \"snake-to-pascal\"\nimport sqlToTsType from \"sql-to-ts-type\"\nimport prettier from \"prettier\"\n\ninterface TreeToTypescriptOptions {\n  primarySchemaName?: string\n  injectedTypesDirectory?: string\n}\n\nexport const treeToTypescriptModels = (\n  db: DatabaseTree,\n  {\n    primarySchemaName = \"public\",\n    injectedTypesDirectory = \"injected-types\",\n  }: TreeToTypescriptOptions = {}\n): { [filePath: string]: string } => {\n  const project = new Project({\n    useInMemoryFileSystem: true,\n  })\n\n  project.addSourceFilesAtPaths(\"**/*ts\")\n  const indexFile = project.createSourceFile(\"index.ts\", \"\")\n  indexFile.addImportDeclaration({\n    moduleSpecifier: \"./knex\",\n  })\n  const isPrimarySchemaNameValid = Object.keys(db.schemas).includes(\n    primarySchemaName\n  )\n\n  if (isPrimarySchemaNameValid) {\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${primarySchemaName}`,\n    })\n  }\n\n  for (const [schemaName, schema] of Object.entries(db.schemas)) {\n    if (Object.keys(schema.tables).length === 0) continue\n\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${schemaName}`,\n      namespaceExport: schemaName !== \"public\" ? schemaName : \"public_\",\n    })\n  }\n\n  const knexFile = project.createSourceFile(\"knex.ts\", \"\")\n  const prefixedKnexFileImportAliases = []\n\n  for (const schema of Object.values(db.schemas)) {\n    const schemaName = schema.name\n\n    if (Object.keys(schema.tables).length === 0) continue\n\n    project.createSourceFile(`${schemaName}`, \"\")\n    const schemaIndexFile = project.createSourceFile(\n      `${schemaName}/index.ts`,\n      \"\"\n    )\n\n    const modelTypeMapName = \"ModelTypeMap\"\n    const InitializerTypeMapName = \"InitializerTypeMap\"\n    const modelTypeMapDeclaration = schemaIndexFile.addInterface({\n      name: modelTypeMapName,\n    })\n    const initializermodelTypeMapDeclaration = schemaIndexFile.addInterface({\n      name: InitializerTypeMapName,\n    })\n    const schemaIndexFileExportDeclaration =\n      schemaIndexFile.addExportDeclaration({\n        isTypeOnly: true,\n        namedExports: [modelTypeMapName, InitializerTypeMapName],\n      })\n\n    const knexFileImportAlias = snakeToPascal(schemaName) + modelTypeMapName\n    const prefixedKnexFileImportAlias = `Prefixed${knexFileImportAlias}`\n    prefixedKnexFileImportAliases.push(prefixedKnexFileImportAlias)\n\n    const knexFileExportDeclaration = knexFile.insertImportDeclaration(0, {\n      moduleSpecifier: `./${schemaName}`,\n    })\n    knexFileExportDeclaration.addNamedImport({\n      name: modelTypeMapName,\n      alias: knexFileImportAlias,\n    })\n\n    knexFile.addTypeAlias({\n      name: prefixedKnexFileImportAlias,\n      type: `{\\n[K in keyof ${knexFileImportAlias} as \\`${schemaName}.\\${K}\\`]: ${knexFileImportAlias}[K]\\n}`,\n    })\n\n    for (const [tableName, tableData] of Object.entries(schema.tables)) {\n      const pascaledTableName = snakeToPascal(tableName)\n      const initializerName = `${pascaledTableName}Initializer`\n      const tableFile = project.createSourceFile(\n        `${schemaName}/${pascaledTableName}.ts`,\n        \"\"\n      )\n\n      for (const column of tableData.columns) {\n        if (column.name.endsWith(\"_id\")) {\n          const columnTypeName = snakeToPascal(column.name)\n          tableFile.addTypeAlias({\n            name: columnTypeName,\n            type: \"string\",\n            isExported: true,\n          })\n        }\n      }\n\n      const tableInterfaceDeclaration = tableFile.addInterface({\n        name: pascaledTableName,\n        isDefaultExport: true,\n      })\n\n      const tableInterfaceInitializerDeclaration = tableFile.addInterface({\n        name: initializerName,\n        isExported: true,\n      })\n\n      for (const column of tableData.columns) {\n        const propertyCanBeNull = !column.query.includes(\"NOT NULL\")\n        const propertyHasDefaultValue = column.query.includes(\"DEFAULT\")\n        const isPropertyOptional = propertyHasDefaultValue || propertyCanBeNull\n        let tsType = sqlToTsType(column.type, propertyCanBeNull)\n\n        if (column.name.endsWith(\"_id\")) tsType = snakeToPascal(column.name)\n\n        const injectedTypeComment = column.comments.find((comment) =>\n          comment.comment.includes(\"@type:\")\n        )\n        if (injectedTypeComment) {\n          const typeToInject = injectedTypeComment.comment\n            .split(\"@type:\")[1]\n            .trim()\n          tsType = typeToInject\n          tableFile.insertImportDeclaration(0, {\n            moduleSpecifier: `${injectedTypesDirectory}/${typeToInject}`,\n            defaultImport: typeToInject,\n          })\n        }\n\n        tableInterfaceDeclaration.addProperty({\n          name: column.name,\n          type: tsType,\n        })\n\n        tableInterfaceInitializerDeclaration.addProperty({\n          name: column.name,\n          type: tsType,\n          hasQuestionToken: isPropertyOptional,\n        })\n      }\n\n      const interfaceImportDeclaration = schemaIndexFile.addImportDeclaration({\n        moduleSpecifier: `./${pascaledTableName}`,\n        defaultImport: pascaledTableName,\n      })\n      interfaceImportDeclaration.addNamedImport({\n        name: initializerName,\n      })\n      modelTypeMapDeclaration.addProperty({\n        name: tableName,\n        type: pascaledTableName,\n      })\n\n      initializermodelTypeMapDeclaration.addProperty({\n        name: tableName,\n        type: initializerName,\n      })\n      schemaIndexFileExportDeclaration.addNamedExports([\n        pascaledTableName,\n        initializerName,\n      ])\n\n      tableFile.saveSync()\n    }\n    schemaIndexFile.saveSync()\n  }\n\n  const moduleDeclaration = knexFile.addModule({\n    name: '\"knex/types/tables\"',\n    hasDeclareKeyword: true,\n    declarationKind: ModuleDeclarationKind.Module,\n  })\n\n  moduleDeclaration.addInterface({\n    name: \"Tables\",\n    extends: isPrimarySchemaNameValid\n      ? [snakeToPascal(primarySchemaName) + \"ModelTypeMap\"]\n      : [\"PublicModelTypeMap\"],\n  })\n  const addInterfaceTemplates = prefixedKnexFileImportAliases.map((alias) => ({\n    name: \"Tables\",\n    extends: alias,\n  }))\n  moduleDeclaration.addInterfaces(addInterfaceTemplates)\n\n  indexFile.saveSync()\n  knexFile.saveSync()\n\n  const filePaths = project.getFileSystem().globSync([\"**/*.ts\"])\n\n  const fsObj = {}\n\n  for (const filePath of filePaths) {\n    fsObj[`.${filePath}`] = prettier.format(\n      project.getFileSystem().readFileSync(filePath),\n      {\n        semi: false,\n        parser: \"typescript\",\n      }\n    )\n  }\n\n  return fsObj\n}\n\nexport default treeToTypescriptModels\n","import { camelCase } from \"lodash\"\n\nexport const snakeToPascal = (string: string): string => {\n  const camelCased = camelCase(string)\n\n  return camelCased[0].toUpperCase() + camelCased.slice(1)\n}\n\nexport default snakeToPascal\n","export const sqlToTsType = (type: string, canBeNull: boolean): string => {\n  let tsType = null\n  const typeWithoutArray = type.replace(/\\[\\]$/, \"\")\n  const isTypeArray = type.endsWith(\"[]\")\n\n  switch (typeWithoutArray) {\n    case \"text\":\n    case \"uuid\":\n    case \"varchar\":\n      tsType = \"string\"\n      break\n\n    case \"int4\":\n    case \"int\":\n      tsType = \"number\"\n      break\n\n    case \"jsonb\":\n      tsType = \"any\"\n      break\n\n    case \"timestamptz\":\n    case \"timestamp\":\n      tsType = \"Date\"\n      break\n\n    case \"bool\":\n    case \"boolean\":\n      tsType = \"boolean\"\n      break\n\n    default:\n      tsType = \"any\"\n      break\n  }\n\n  if (isTypeArray) {\n    tsType += \"[]\"\n  }\n\n  if (tsType === \"any\") {\n    return tsType\n  }\n\n  return canBeNull ? `${tsType} | null` : tsType\n}\n\nexport default sqlToTsType\n"],"mappings":"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","names":[]}