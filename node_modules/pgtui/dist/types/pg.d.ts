declare namespace pg {
    type Statement = AlterTableStmt | AlterSeqStmt | CreateTrigStmt | ViewStmt | AlterOwnerStmt | VariableSetStmt | CreateStmt | CreateFunctionStmt | CreateDomainStmt | CreateSchemaStmt | GrantStmt | CreatePolicyStmt | CreateSeqStmt | CreateExtensionStmt | CommentStmt | IndexStmt | RuleStmt | InsertStmt;
    type Expression = ValueObject | RoleSpec | DefElem | Constraint | Relation | ColumnDef | Array<Expression>;
    type ObjectType = "OBJECT_EXTENSION" | "OBJECT_SCHEMA" | "OBJECT_TABLE" | "OBJECT_FUNCTION" | "OBJECT_SEQUENCE" | "OBJECT_DOMAIN";
    type IndexStmt = {
        IndexStmt: {
            idxname: string;
            relation: Relation;
            accessMethod: "btree";
            indexParams: Array<any>;
            unique: boolean;
        };
    };
    type CommentStmt = {
        CommentStmt: {
            objtype: ObjectType;
            object: ValueObject;
            comment: string;
        };
    };
    type CreateExtensionStmt = {
        CreateExtensionStmt: {
            extname: string;
            if_not_exists: boolean;
            options: Array<ValueObject>;
        };
    };
    type ValueObject = {
        String: {
            str: string;
        };
    } | {
        List: {
            items: Array<ValueObject>;
        };
    };
    type RoleSpec = {
        roletype: "ROLESPEC_CSTRING";
        rolename: string;
    };
    type Relation = {
        schemaname: string;
        relname: string;
    };
    type Command = AlterTableCmd;
    type AlterTableCmd = {
        AlterTableCmd: {
            subtype: "AT_EnableRowSecurity";
            behavior: "DROP_RESTRICT";
        };
    };
    type DefElem = {
        DefElem: {
            defname: "owned_by";
            arg: ValueObject;
        };
    };
    type AlterSeqStmt = {
        AlterSeqStmt: {
            sequence: Relation;
            options: Array<DefElem>;
        };
    };
    type AlterTableStmt = {
        AlterTableStmt: {
            relation: Relation;
            cmds: Array<Command>;
            relkind: ObjectType;
        };
    };
    type Constraint = {
        contype: "CONSTR_NOTNULL";
    };
    type ColumnDef = {
        ColumnDef: {
            colname: string;
            typeName: {
                names: Array<ValueObject>;
                typemod: -1;
            };
            is_local: boolean;
            constraints: Array<Constraint>;
        };
    };
    type CreateStmt = {
        CreateStmt: {
            relation: Relation;
            tableElts: Array<ColumnDef>;
            oncommit: "ONCOMMIT_NOOP";
        };
    };
    type CreateSeqStmt = {
        CreateSeqStmt: {
            sequence: Relation;
            options: Array<ValueObject>;
        };
    };
    type GrantStmt = {
        GrantStmt: {
            is_grant: boolean;
            targtype: "ACL_TARGET_OBJECT";
            objtype: ObjectType;
            objects: Array<ValueObject>;
            grantees: Array<RoleSpec>;
        };
    };
    type CreateSchemaStmt = {
        CreateSchemaStmt: {
            schemaname: string;
        };
    };
    type CreateFunctionStmt = {
        CreateFunctionStmt: {
            funcname: Array<ValueObject>;
            returnType: {
                names: Array<ValueObject>;
            };
            options: Array<{
                DefElem: {
                    defname: "language" | "as";
                    arg: ValueObject;
                };
            }>;
        };
    };
    type CreateDomainStmt = {
        CreateDomainStmt: {
            domainname: Array<ValueObject>;
            typeName: {
                names: Array<ValueObject>;
            };
        };
    };
    type VariableSetStmt = {
        VariableSetStmt: {};
    };
    type AlterOwnerStmt = {
        AlterOwnerStmt: {
            objectType: ObjectType;
            object: ValueObject;
            newowner: RoleSpec;
        };
    };
    type ViewStmt = {
        ViewStmt: {
            view: Relation;
            query: Statement;
        };
    };
    type CreateTrigStmt = {
        CreateTrigStmt: {
            trigname: string;
            relation: Relation;
            funcname: Array<ValueObject>;
            row: boolean;
            timing: number;
            events: number;
        };
    };
    type CreatePolicyStmt = {
        CreatePolicyStmt: {
            policy_name: string;
            table: Relation;
            cmd_name: string;
            permissive: boolean;
            roles: Array<{
                RoleSpec: {
                    roletype: "ROLESPEC_CSTRING";
                    rolename: string;
                };
            }>;
            qual: Expression;
        };
    };
    type InsertStmt = {
        InsertStmt: {
            relation: Relation;
            selectStmt: any;
            returningList: Array<any>;
        };
    };
    type RuleStmt = {
        RuleStmt: {
            relation: Relation;
            rulename: string;
            instead: boolean;
            actions: Array<InsertStmt>;
        };
    };
}

export { pg };
